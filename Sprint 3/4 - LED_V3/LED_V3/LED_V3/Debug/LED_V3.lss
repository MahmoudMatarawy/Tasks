
LED_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000007de  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080007a  0080007a  0000088c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d66  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8e  00000000  00000000  0000282e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b8  00000000  00000000  000034bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00004774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b08  00000000  00000000  00004b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e6  00000000  00000000  00005614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000067fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_2>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_9>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	5d 01       	movw	r10, r26
  56:	63 01       	movw	r12, r6
  58:	6e 01       	movw	r12, r28
  5a:	7e 01       	movw	r14, r28
  5c:	93 01       	movw	r18, r6
  5e:	a6 01       	movw	r20, r12
  60:	b7 01       	movw	r22, r14
  62:	c6 01       	movw	r24, r12

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ee ed       	ldi	r30, 0xDE	; 222
  78:	f7 e0       	ldi	r31, 0x07	; 7
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	aa e7       	ldi	r26, 0x7A	; 122
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a8 38       	cpi	r26, 0x88	; 136
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
  9a:	0c 94 ed 03 	jmp	0x7da	; 0x7da <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_1>:




ISR(INT0_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
	if (f_int>0)
  ae:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <f_int>
  b2:	88 23       	and	r24, r24
  b4:	31 f0       	breq	.+12     	; 0xc2 <__vector_1+0x20>
	{
		u8_Full_cycle++;
  b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <__vector_1+0x26>
	}
	else
	{
		f_int++;
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <f_int>
	}
}
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_2>:



ISR(INT1_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	if (f_int1>0)
  e0:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <f_int1>
  e4:	88 23       	and	r24, r24
  e6:	69 f0       	breq	.+26     	; 0x102 <__vector_2+0x2e>
	{
		u8_blink_counter = 0;
  e8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u8_blink_counter>
		if (u8_mode_counter == 4)
  ec:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
  f0:	84 30       	cpi	r24, 0x04	; 4
  f2:	19 f4       	brne	.+6      	; 0xfa <__vector_2+0x26>
		{
			u8_mode_counter = 0;
  f4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <u8_mode_counter>
  f8:	07 c0       	rjmp	.+14     	; 0x108 <__vector_2+0x34>
		}
		else
		{
			u8_mode_counter++;
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <u8_mode_counter>
 100:	03 c0       	rjmp	.+6      	; 0x108 <__vector_2+0x34>
		}
		//u8_mode_counter++;
	}
	else
	{
		f_int1++;
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <f_int1>
	}
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_9>:



ISR(TIMER1_OVF_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	u8_blink_counter++;
 122:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u8_blink_counter>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <u8_blink_counter>
	TCNT1 = 15536 ;
 12c:	80 eb       	ldi	r24, 0xB0	; 176
 12e:	9c e3       	ldi	r25, 0x3C	; 60
 130:	9d bd       	out	0x2d, r25	; 45
 132:	8c bd       	out	0x2c, r24	; 44
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <blink_1>:



void blink_1(LED_ID_type led)
{
	if (u8_blink_counter >= 0  && u8_blink_counter < 2)
 142:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 146:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 14a:	92 30       	cpi	r25, 0x02	; 2
 14c:	18 f4       	brcc	.+6      	; 0x154 <blink_1+0x12>
	{
		led_ON(led);
 14e:	0e 94 b5 03 	call	0x76a	; 0x76a <led_ON>
 152:	08 95       	ret
	}
	else if (u8_blink_counter >= 2	&& u8_blink_counter < 20)
 154:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 158:	92 30       	cpi	r25, 0x02	; 2
 15a:	38 f0       	brcs	.+14     	; 0x16a <blink_1+0x28>
 15c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 160:	94 31       	cpi	r25, 0x14	; 20
 162:	18 f4       	brcc	.+6      	; 0x16a <blink_1+0x28>
	{
		led_OFF(led);
 164:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
 168:	08 95       	ret
	}
	else if (u8_blink_counter >= 20)
 16a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u8_blink_counter>
 16e:	84 31       	cpi	r24, 0x14	; 20
 170:	10 f0       	brcs	.+4      	; 0x176 <blink_1+0x34>
	{
		u8_blink_counter = 0;
 172:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u8_blink_counter>
 176:	08 95       	ret

00000178 <blink_2>:
		// do nothing
	}
}
void blink_2(LED_ID_type led)
{
	if (u8_blink_counter >= 0  && u8_blink_counter < 4)
 178:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 17c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 180:	94 30       	cpi	r25, 0x04	; 4
 182:	18 f4       	brcc	.+6      	; 0x18a <blink_2+0x12>
	{
		led_ON(led);
 184:	0e 94 b5 03 	call	0x76a	; 0x76a <led_ON>
 188:	08 95       	ret
	}
	else if (u8_blink_counter >= 4	&& u8_blink_counter < 20)
 18a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 18e:	94 30       	cpi	r25, 0x04	; 4
 190:	38 f0       	brcs	.+14     	; 0x1a0 <blink_2+0x28>
 192:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 196:	94 31       	cpi	r25, 0x14	; 20
 198:	18 f4       	brcc	.+6      	; 0x1a0 <blink_2+0x28>
	{
		led_OFF(led);
 19a:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
 19e:	08 95       	ret
	}
	else if (u8_blink_counter >= 20)
 1a0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u8_blink_counter>
 1a4:	84 31       	cpi	r24, 0x14	; 20
 1a6:	10 f0       	brcs	.+4      	; 0x1ac <blink_2+0x34>
	{
		u8_blink_counter = 0;
 1a8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u8_blink_counter>
 1ac:	08 95       	ret

000001ae <blink_3>:
		// do nothing
	}
}
void blink_3(LED_ID_type led)
{
	if (u8_blink_counter >= 0  && u8_blink_counter < 6)
 1ae:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 1b2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 1b6:	96 30       	cpi	r25, 0x06	; 6
 1b8:	18 f4       	brcc	.+6      	; 0x1c0 <blink_3+0x12>
	{
		led_ON(led);
 1ba:	0e 94 b5 03 	call	0x76a	; 0x76a <led_ON>
 1be:	08 95       	ret
	}
	else if (u8_blink_counter >= 6	&& u8_blink_counter < 20)
 1c0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 1c4:	96 30       	cpi	r25, 0x06	; 6
 1c6:	38 f0       	brcs	.+14     	; 0x1d6 <blink_3+0x28>
 1c8:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 1cc:	94 31       	cpi	r25, 0x14	; 20
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <blink_3+0x28>
	{
		led_OFF(led);
 1d0:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
 1d4:	08 95       	ret
	}
	else if (u8_blink_counter >= 20)
 1d6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u8_blink_counter>
 1da:	84 31       	cpi	r24, 0x14	; 20
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <blink_3+0x34>
	{
		u8_blink_counter = 0;
 1de:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u8_blink_counter>
 1e2:	08 95       	ret

000001e4 <blink_4>:
		// do nothing
	}
}
void blink_4(LED_ID_type led)
{
	if (u8_blink_counter >= 0  && u8_blink_counter < 10)
 1e4:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 1e8:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 1ec:	9a 30       	cpi	r25, 0x0A	; 10
 1ee:	18 f4       	brcc	.+6      	; 0x1f6 <blink_4+0x12>
	{
		led_ON(led);
 1f0:	0e 94 b5 03 	call	0x76a	; 0x76a <led_ON>
 1f4:	08 95       	ret
	}
	else if (u8_blink_counter >= 10	&& u8_blink_counter < 20)
 1f6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 1fa:	9a 30       	cpi	r25, 0x0A	; 10
 1fc:	38 f0       	brcs	.+14     	; 0x20c <blink_4+0x28>
 1fe:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 202:	94 31       	cpi	r25, 0x14	; 20
 204:	18 f4       	brcc	.+6      	; 0x20c <blink_4+0x28>
	{
		led_OFF(led);
 206:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
 20a:	08 95       	ret
	}
	else if (u8_blink_counter >= 20)
 20c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u8_blink_counter>
 210:	84 31       	cpi	r24, 0x14	; 20
 212:	10 f0       	brcs	.+4      	; 0x218 <blink_4+0x34>
	{
		u8_blink_counter = 0;
 214:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u8_blink_counter>
 218:	08 95       	ret

0000021a <blink_5>:
		// do nothing
	}
}
void blink_5(LED_ID_type led)
{
	if (u8_blink_counter >= 0  && u8_blink_counter < 16)
 21a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 21e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 222:	90 31       	cpi	r25, 0x10	; 16
 224:	18 f4       	brcc	.+6      	; 0x22c <blink_5+0x12>
	{
		led_ON(led);
 226:	0e 94 b5 03 	call	0x76a	; 0x76a <led_ON>
 22a:	08 95       	ret
	}
	else if (u8_blink_counter >= 16	&& u8_blink_counter < 20)
 22c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 230:	90 31       	cpi	r25, 0x10	; 16
 232:	38 f0       	brcs	.+14     	; 0x242 <blink_5+0x28>
 234:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u8_blink_counter>
 238:	94 31       	cpi	r25, 0x14	; 20
 23a:	18 f4       	brcc	.+6      	; 0x242 <blink_5+0x28>
	{
		led_OFF(led);
 23c:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
 240:	08 95       	ret
	}
	else if (u8_blink_counter >= 20)
 242:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u8_blink_counter>
 246:	84 31       	cpi	r24, 0x14	; 20
 248:	10 f0       	brcs	.+4      	; 0x24e <blink_5+0x34>
	{
		u8_blink_counter = 0;
 24a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u8_blink_counter>
 24e:	08 95       	ret

00000250 <blink_mode>:
	}
}

void blink_mode(uint8_t blink , uint8_t led)
{
	switch(blink)
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	99 f0       	breq	.+38     	; 0x27a <blink_mode+0x2a>
 254:	28 f4       	brcc	.+10     	; 0x260 <blink_mode+0x10>
 256:	88 23       	and	r24, r24
 258:	41 f0       	breq	.+16     	; 0x26a <blink_mode+0x1a>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	51 f0       	breq	.+20     	; 0x272 <blink_mode+0x22>
 25e:	08 95       	ret
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	79 f0       	breq	.+30     	; 0x282 <blink_mode+0x32>
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	89 f0       	breq	.+34     	; 0x28a <blink_mode+0x3a>
 268:	08 95       	ret
	{
		case 0 :
		{
			blink_1(led);
 26a:	86 2f       	mov	r24, r22
 26c:	0e 94 a1 00 	call	0x142	; 0x142 <blink_1>
			break;
 270:	08 95       	ret
		}
		
		
		case 1 :
		{
			blink_2(led);
 272:	86 2f       	mov	r24, r22
 274:	0e 94 bc 00 	call	0x178	; 0x178 <blink_2>
			break;
 278:	08 95       	ret
		}
		
		
		case 2:
		{
			blink_3(led);
 27a:	86 2f       	mov	r24, r22
 27c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <blink_3>
			break;
 280:	08 95       	ret
		}
		
		
		case 3 :
		{
			blink_4(led);
 282:	86 2f       	mov	r24, r22
 284:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <blink_4>
			break;
 288:	08 95       	ret
		}
		
		
		case 4 :
		{
			blink_5(led);
 28a:	86 2f       	mov	r24, r22
 28c:	0e 94 0d 01 	call	0x21a	; 0x21a <blink_5>
 290:	08 95       	ret

00000292 <appStart>:
	}
}

void appStart(void)
{
	 button_Init();
 292:	0e 94 6d 03 	call	0x6da	; 0x6da <button_Init>
	 led_Init();
 296:	0e 94 c6 03 	call	0x78c	; 0x78c <led_Init>
	 timer_delay_50ms(Timer_1);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <timer_delay_50ms>
	 
	while(1)
	{
		switch(u8_Full_cycle)
 2a0:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 2a4:	8e 2f       	mov	r24, r30
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	e8 30       	cpi	r30, 0x08	; 8
 2ae:	f1 05       	cpc	r31, r1
 2b0:	b8 f7       	brcc	.-18     	; 0x2a0 <appStart+0xe>
 2b2:	e6 5d       	subi	r30, 0xD6	; 214
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__tablejump2__>
		{
			case 1:
			{
				blink_mode(u8_mode_counter , 1);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 2c0:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				break;
 2c4:	ed cf       	rjmp	.-38     	; 0x2a0 <appStart+0xe>
			}
			
			
			case 2:
			{
				blink_mode(u8_mode_counter , 1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 2cc:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 2);
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 2d6:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				break;
 2da:	e2 cf       	rjmp	.-60     	; 0x2a0 <appStart+0xe>
			}
			
			
			case 3 :
			{
				blink_mode(u8_mode_counter , 1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 2e2:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 2);
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 2ec:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 3);
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 2f6:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				break;
 2fa:	d2 cf       	rjmp	.-92     	; 0x2a0 <appStart+0xe>
			}
			
			
			case 4 :
			{
				blink_mode(u8_mode_counter , 1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 302:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 2);
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 30c:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 3);
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 316:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 4);
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 320:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				break;
 324:	bd cf       	rjmp	.-134    	; 0x2a0 <appStart+0xe>
			}
			
			
			case 5:
			{
				led_OFF(1);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				blink_mode(u8_mode_counter , 2);
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 332:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 3);
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 33c:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter , 4);
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 346:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				break;
 34a:	aa cf       	rjmp	.-172    	; 0x2a0 <appStart+0xe>
			}
			
			
			case 6:
			{
				led_OFF(1);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				led_OFF(2);
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				blink_mode(u8_mode_counter , 3);
 358:	63 e0       	ldi	r22, 0x03	; 3
 35a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 35e:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				blink_mode(u8_mode_counter, 4);
 362:	64 e0       	ldi	r22, 0x04	; 4
 364:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 368:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				break;
 36c:	99 cf       	rjmp	.-206    	; 0x2a0 <appStart+0xe>
			
			
			
			case 7 :
			{
				led_OFF(1);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				led_OFF(2);
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				led_OFF(3);
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				blink_mode(u8_mode_counter , 4);
 380:	64 e0       	ldi	r22, 0x04	; 4
 382:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_mode_counter>
 386:	0e 94 28 01 	call	0x250	; 0x250 <blink_mode>
				break;
 38a:	8a cf       	rjmp	.-236    	; 0x2a0 <appStart+0xe>
			}
			
			
			case 8 :
			{
				led_OFF(1);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				led_OFF(2);
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				led_OFF(3);
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				led_OFF(4);
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>
				u8_Full_cycle = 0;
 3a4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
				break;
 3a8:	7b cf       	rjmp	.-266    	; 0x2a0 <appStart+0xe>

000003aa <main>:



int main(void)
{
	appStart();
 3aa:	0e 94 49 01 	call	0x292	; 0x292 <appStart>
}
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	08 95       	ret

000003b4 <DIO_ChannelSetDIR>:
	else{
		en_dio_Errors =  DIO_InvalidPin;
	}
	
	return en_dio_Errors;	
}
 3b4:	80 32       	cpi	r24, 0x20	; 32
 3b6:	a8 f5       	brcc	.+106    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	58 f4       	brcc	.+22     	; 0x3d2 <DIO_ChannelSetDIR+0x1e>
 3bc:	9a b3       	in	r25, 0x1a	; 26
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_ChannelSetDIR+0x12>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_ChannelSetDIR+0xe>
 3ca:	69 2b       	or	r22, r25
 3cc:	6a bb       	out	0x1a, r22	; 26
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
 3d2:	80 31       	cpi	r24, 0x10	; 16
 3d4:	60 f4       	brcc	.+24     	; 0x3ee <DIO_ChannelSetDIR+0x3a>
 3d6:	88 50       	subi	r24, 0x08	; 8
 3d8:	97 b3       	in	r25, 0x17	; 23
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_ChannelSetDIR+0x2e>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_ChannelSetDIR+0x2a>
 3e6:	69 2b       	or	r22, r25
 3e8:	67 bb       	out	0x17, r22	; 23
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
 3ee:	88 31       	cpi	r24, 0x18	; 24
 3f0:	60 f4       	brcc	.+24     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3f2:	80 51       	subi	r24, 0x10	; 16
 3f4:	94 b3       	in	r25, 0x14	; 20
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_ChannelSetDIR+0x4a>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	8a 95       	dec	r24
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_ChannelSetDIR+0x46>
 402:	69 2b       	or	r22, r25
 404:	64 bb       	out	0x14, r22	; 20
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	08 95       	ret
 40a:	88 51       	subi	r24, 0x18	; 24
 40c:	91 b3       	in	r25, 0x11	; 17
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	69 2b       	or	r22, r25
 41c:	61 bb       	out	0x11, r22	; 17
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	08 95       	ret

00000426 <DIO_WriteChannel>:
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
	uint8_t pinNumber ;
	
	
	if (ChannelId < DIO_MAX_PINS )
 426:	80 32       	cpi	r24, 0x20	; 32
 428:	08 f0       	brcs	.+2      	; 0x42c <DIO_WriteChannel+0x6>
 42a:	85 c0       	rjmp	.+266    	; 0x536 <DIO_WriteChannel+0x110>
	{
		if (ChannelId < DIO_PORTB_Channel0)
 42c:	88 30       	cpi	r24, 0x08	; 8
 42e:	f8 f4       	brcc	.+62     	; 0x46e <DIO_WriteChannel+0x48>
		{
			pinNumber = ChannelId;
			if (level == STD_HIGH)
 430:	61 30       	cpi	r22, 0x01	; 1
 432:	71 f4       	brne	.+28     	; 0x450 <DIO_WriteChannel+0x2a>
			{
				WR_PORT_A |= (1U << pinNumber);
 434:	4b b3       	in	r20, 0x1b	; 27
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_WriteChannel+0x1c>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_WriteChannel+0x18>
 446:	cb 01       	movw	r24, r22
 448:	84 2b       	or	r24, r20
 44a:	8b bb       	out	0x1b, r24	; 27
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_A |= (1U << pinNumber);
			}
			else{
				WR_PORT_A &= ~(1U << pinNumber);
 450:	4b b3       	in	r20, 0x1b	; 27
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_WriteChannel+0x38>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	8a 95       	dec	r24
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_WriteChannel+0x34>
 462:	cb 01       	movw	r24, r22
 464:	80 95       	com	r24
 466:	84 23       	and	r24, r20
 468:	8b bb       	out	0x1b, r24	; 27
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
			}
			else{
				WR_PORT_A &= ~(1U << pinNumber);
			}
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 46e:	80 31       	cpi	r24, 0x10	; 16
 470:	00 f5       	brcc	.+64     	; 0x4b2 <DIO_WriteChannel+0x8c>
		{
			pinNumber = ChannelId - PORTA_CHANNELS;
 472:	88 50       	subi	r24, 0x08	; 8
			if (level == STD_HIGH)
 474:	61 30       	cpi	r22, 0x01	; 1
 476:	71 f4       	brne	.+28     	; 0x494 <DIO_WriteChannel+0x6e>
			{
				WR_PORT_B |= (1U << pinNumber);
 478:	48 b3       	in	r20, 0x18	; 24
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	b9 01       	movw	r22, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_WriteChannel+0x60>
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	8a 95       	dec	r24
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_WriteChannel+0x5c>
 48a:	cb 01       	movw	r24, r22
 48c:	84 2b       	or	r24, r20
 48e:	88 bb       	out	0x18, r24	; 24
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_B |= (1U << pinNumber);
			}
			else{
				WR_PORT_B &= ~(1U << pinNumber);
 494:	48 b3       	in	r20, 0x18	; 24
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_WriteChannel+0x7c>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_WriteChannel+0x78>
 4a6:	cb 01       	movw	r24, r22
 4a8:	80 95       	com	r24
 4aa:	84 23       	and	r24, r20
 4ac:	88 bb       	out	0x18, r24	; 24
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
			}
			else{
				WR_PORT_B &= ~(1U << pinNumber);
			}
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 4b2:	88 31       	cpi	r24, 0x18	; 24
 4b4:	00 f5       	brcc	.+64     	; 0x4f6 <DIO_WriteChannel+0xd0>
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS;
 4b6:	80 51       	subi	r24, 0x10	; 16
			if (level == STD_HIGH)
 4b8:	61 30       	cpi	r22, 0x01	; 1
 4ba:	71 f4       	brne	.+28     	; 0x4d8 <DIO_WriteChannel+0xb2>
			{
				WR_PORT_C |= (1U << pinNumber);
 4bc:	45 b3       	in	r20, 0x15	; 21
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_WriteChannel+0xa4>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	8a 95       	dec	r24
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_WriteChannel+0xa0>
 4ce:	cb 01       	movw	r24, r22
 4d0:	84 2b       	or	r24, r20
 4d2:	85 bb       	out	0x15, r24	; 21
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_C |= (1U << pinNumber);
			}
			else{
				WR_PORT_C &= ~(1U << pinNumber);
 4d8:	45 b3       	in	r20, 0x15	; 21
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_WriteChannel+0xc0>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_WriteChannel+0xbc>
 4ea:	cb 01       	movw	r24, r22
 4ec:	80 95       	com	r24
 4ee:	84 23       	and	r24, r20
 4f0:	85 bb       	out	0x15, r24	; 21
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
				WR_PORT_C &= ~(1U << pinNumber);
			}
		}
		else
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS - PORTC_CHANNELS;
 4f6:	88 51       	subi	r24, 0x18	; 24
			if (level == STD_HIGH)
 4f8:	61 30       	cpi	r22, 0x01	; 1
 4fa:	71 f4       	brne	.+28     	; 0x518 <DIO_WriteChannel+0xf2>
			{
				WR_PORT_D |= (1U << pinNumber);
 4fc:	42 b3       	in	r20, 0x12	; 18
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	b9 01       	movw	r22, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_WriteChannel+0xe4>
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_WriteChannel+0xe0>
 50e:	cb 01       	movw	r24, r22
 510:	84 2b       	or	r24, r20
 512:	82 bb       	out	0x12, r24	; 18
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_D |= (1U << pinNumber);
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
 518:	42 b3       	in	r20, 0x12	; 18
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	b9 01       	movw	r22, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_WriteChannel+0x100>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_WriteChannel+0xfc>
 52a:	cb 01       	movw	r24, r22
 52c:	80 95       	com	r24
 52e:	84 23       	and	r24, r20
 530:	82 bb       	out	0x12, r24	; 18
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	08 95       	ret
			}
		}
		//return DIO_E_OK;
	}
	else{
		en_dio_Errors = DIO_InvalidPin;
 536:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return en_dio_Errors;
 538:	08 95       	ret

0000053a <eXT_INT_Enable>:

EXT_INT_ERR_TYPE eXT_INT_Enable(EXT_INT_ID_TYPE id , EXT_INT_MODE_TYPE mode)
{
	EXT_INT_ERR_TYPE EXT_INT_ERR = EXT_INT_ERR_OK;
	// valid ID
	if (id < EXT_INT_MAX_NUM	&&		mode <= EXT_INT_RISING_EDGE)
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	08 f0       	brcs	.+2      	; 0x540 <eXT_INT_Enable+0x6>
 53e:	49 c0       	rjmp	.+146    	; 0x5d2 <eXT_INT_Enable+0x98>
 540:	62 30       	cpi	r22, 0x02	; 2
 542:	08 f0       	brcs	.+2      	; 0x546 <eXT_INT_Enable+0xc>
 544:	48 c0       	rjmp	.+144    	; 0x5d6 <eXT_INT_Enable+0x9c>
	{
		// Enable Interrupt
		GLOBAL_EXT_INT_REG |= (1U << EXT_PIN_ID[id]);
 546:	9b b7       	in	r25, 0x3b	; 59
 548:	e8 2f       	mov	r30, r24
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	e0 5a       	subi	r30, 0xA0	; 160
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	00 80       	ld	r0, Z
 556:	02 c0       	rjmp	.+4      	; 0x55c <eXT_INT_Enable+0x22>
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <eXT_INT_Enable+0x1e>
 560:	29 2b       	or	r18, r25
 562:	2b bf       	out	0x3b, r18	; 59
		
		if (id == INT_2_ID)
 564:	82 30       	cpi	r24, 0x02	; 2
 566:	79 f4       	brne	.+30     	; 0x586 <eXT_INT_Enable+0x4c>
		{
			switch(mode)
 568:	66 23       	and	r22, r22
 56a:	19 f0       	breq	.+6      	; 0x572 <eXT_INT_Enable+0x38>
 56c:	61 30       	cpi	r22, 0x01	; 1
 56e:	31 f0       	breq	.+12     	; 0x57c <eXT_INT_Enable+0x42>
 570:	34 c0       	rjmp	.+104    	; 0x5da <eXT_INT_Enable+0xa0>
			{
				case EXT_INT_FALLING_EDGE:
				{
											MCU_Control_Register_INT2 &= ~(1U << INT_2_BIT) ;
 572:	84 b7       	in	r24, 0x34	; 52
 574:	8f 7b       	andi	r24, 0xBF	; 191
 576:	84 bf       	out	0x34, r24	; 52
				{
						break;
				}
			}
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
 578:	80 e0       	ldi	r24, 0x00	; 0
			switch(mode)
			{
				case EXT_INT_FALLING_EDGE:
				{
											MCU_Control_Register_INT2 &= ~(1U << INT_2_BIT) ;
											break;
 57a:	08 95       	ret
				}
				case  EXT_INT_RISING_EDGE:
				{
											MCU_Control_Register_INT2 |= (1U << INT_2_BIT) ;
 57c:	84 b7       	in	r24, 0x34	; 52
 57e:	80 64       	ori	r24, 0x40	; 64
 580:	84 bf       	out	0x34, r24	; 52
				{
						break;
				}
			}
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
 582:	80 e0       	ldi	r24, 0x00	; 0
											break;
				}
				case  EXT_INT_RISING_EDGE:
				{
											MCU_Control_Register_INT2 |= (1U << INT_2_BIT) ;
											break;
 584:	08 95       	ret
				{
						break;
				}
			}
		}
		else if(id == INT_0_ID)
 586:	81 11       	cpse	r24, r1
 588:	12 c0       	rjmp	.+36     	; 0x5ae <eXT_INT_Enable+0x74>
		{
			switch(mode)
 58a:	66 23       	and	r22, r22
 58c:	19 f0       	breq	.+6      	; 0x594 <eXT_INT_Enable+0x5a>
 58e:	61 30       	cpi	r22, 0x01	; 1
 590:	49 f0       	breq	.+18     	; 0x5a4 <eXT_INT_Enable+0x6a>
 592:	25 c0       	rjmp	.+74     	; 0x5de <eXT_INT_Enable+0xa4>
			{
				case EXT_INT_FALLING_EDGE:
				{
											MCU_Control_Register |=  (1U << INT_0_BIT_1) ;
 594:	85 b7       	in	r24, 0x35	; 53
 596:	82 60       	ori	r24, 0x02	; 2
 598:	85 bf       	out	0x35, r24	; 53
											MCU_Control_Register &= ~(1U << INT_0_BIT_0) ;
 59a:	85 b7       	in	r24, 0x35	; 53
 59c:	8e 7f       	andi	r24, 0xFE	; 254
 59e:	85 bf       	out	0x35, r24	; 53
				{
						break;
				}
			}
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
			{
				case EXT_INT_FALLING_EDGE:
				{
											MCU_Control_Register |=  (1U << INT_0_BIT_1) ;
											MCU_Control_Register &= ~(1U << INT_0_BIT_0) ;
											break;
 5a2:	08 95       	ret
				}
				case  EXT_INT_RISING_EDGE:
				{
											MCU_Control_Register |= (1U << INT_0_BIT_0) | (1U << INT_0_BIT_1) ;
 5a4:	85 b7       	in	r24, 0x35	; 53
 5a6:	83 60       	ori	r24, 0x03	; 3
 5a8:	85 bf       	out	0x35, r24	; 53
				{
						break;
				}
			}
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
 5aa:	80 e0       	ldi	r24, 0x00	; 0
											break;
				}
				case  EXT_INT_RISING_EDGE:
				{
											MCU_Control_Register |= (1U << INT_0_BIT_0) | (1U << INT_0_BIT_1) ;
											break;
 5ac:	08 95       	ret
				}
			}
		}
		else
		{
			switch(mode)
 5ae:	66 23       	and	r22, r22
 5b0:	19 f0       	breq	.+6      	; 0x5b8 <eXT_INT_Enable+0x7e>
 5b2:	61 30       	cpi	r22, 0x01	; 1
 5b4:	49 f0       	breq	.+18     	; 0x5c8 <eXT_INT_Enable+0x8e>
 5b6:	15 c0       	rjmp	.+42     	; 0x5e2 <eXT_INT_Enable+0xa8>
			{
				case EXT_INT_FALLING_EDGE:
				{
											MCU_Control_Register |=  (1U << INT_1_BIT_1) ;
 5b8:	85 b7       	in	r24, 0x35	; 53
 5ba:	88 60       	ori	r24, 0x08	; 8
 5bc:	85 bf       	out	0x35, r24	; 53
											MCU_Control_Register &= ~(1U << INT_1_BIT_0) ;
 5be:	85 b7       	in	r24, 0x35	; 53
 5c0:	8b 7f       	andi	r24, 0xFB	; 251
 5c2:	85 bf       	out	0x35, r24	; 53
				{
						break;
				}
			}
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
			{
				case EXT_INT_FALLING_EDGE:
				{
											MCU_Control_Register |=  (1U << INT_1_BIT_1) ;
											MCU_Control_Register &= ~(1U << INT_1_BIT_0) ;
											break;
 5c6:	08 95       	ret
				}
				case  EXT_INT_RISING_EDGE:
				{
											MCU_Control_Register |= (1U << INT_1_BIT_0) | (1U << INT_1_BIT_1) ;
 5c8:	85 b7       	in	r24, 0x35	; 53
 5ca:	8c 60       	ori	r24, 0x0C	; 12
 5cc:	85 bf       	out	0x35, r24	; 53
				{
						break;
				}
			}
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
											break;
				}
				case  EXT_INT_RISING_EDGE:
				{
											MCU_Control_Register |= (1U << INT_1_BIT_0) | (1U << INT_1_BIT_1) ;
											break;
 5d0:	08 95       	ret
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
	}
	else
	{
		EXT_INT_ERR = EXT_INT_ERR_OutOfRange;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	08 95       	ret
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	08 95       	ret
				{
						break;
				}
			}
		}
		EXT_INT_ERR = EXT_INT_ERR_OK;
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	08 95       	ret
 5e2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		EXT_INT_ERR = EXT_INT_ERR_OutOfRange;
	}
	return EXT_INT_ERR;
 5e4:	08 95       	ret

000005e6 <Timer_Init>:
uint8_t Timers_status[Max_Timer_Numbers];

en_timer_Errors_t Timer_Init(en_timer_Number_t Timer_Num)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
		if (Timer_Num >= Max_Timer_Numbers)
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	a8 f5       	brcc	.+106    	; 0x654 <Timer_Init+0x6e>
		{
			en_timer_Errors = Timer_E_InvalidValue;
		}
		else
		{
			if (Timers_status[Timer_Num] == Timer_S_Ready)
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	f9 01       	movw	r30, r18
 5f0:	eb 57       	subi	r30, 0x7B	; 123
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	90 81       	ld	r25, Z
 5f6:	91 30       	cpi	r25, 0x01	; 1
 5f8:	79 f1       	breq	.+94     	; 0x658 <Timer_Init+0x72>
			{
				en_timer_Errors = Timer_E_TRANSITION;
			}
			else
			{
				switch(Timer_Num)
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	89 f0       	breq	.+34     	; 0x620 <Timer_Init+0x3a>
 5fe:	18 f0       	brcs	.+6      	; 0x606 <Timer_Init+0x20>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	d9 f0       	breq	.+54     	; 0x63a <Timer_Init+0x54>
 604:	2b c0       	rjmp	.+86     	; 0x65c <Timer_Init+0x76>
				{
					case Timer_0 :
					{
									TIMER_0_CONTROL_REG |= (1U << TIMER_0_CLOCK_SELECT_BIT_0);
 606:	83 b7       	in	r24, 0x33	; 51
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	83 bf       	out	0x33, r24	; 51
									TIMER_INTERRUPT_MASK_REG |= (1U << TIMER_0_OVERFLOW_INTERRUPT_ENABLE);
 60c:	89 b7       	in	r24, 0x39	; 57
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	89 bf       	out	0x39, r24	; 57
									Timers_status[Timer_Num] = Timer_S_Ready;
 612:	f9 01       	movw	r30, r18
 614:	eb 57       	subi	r30, 0x7B	; 123
 616:	ff 4f       	sbci	r31, 0xFF	; 255
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 83       	st	Z, r24

uint8_t Timers_status[Max_Timer_Numbers];

en_timer_Errors_t Timer_Init(en_timer_Number_t Timer_Num)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
 61c:	80 e0       	ldi	r24, 0x00	; 0
					case Timer_0 :
					{
									TIMER_0_CONTROL_REG |= (1U << TIMER_0_CLOCK_SELECT_BIT_0);
									TIMER_INTERRUPT_MASK_REG |= (1U << TIMER_0_OVERFLOW_INTERRUPT_ENABLE);
									Timers_status[Timer_Num] = Timer_S_Ready;
									break;
 61e:	08 95       	ret
					}
					case Timer_1 :
					{
									TIMER_1_CONTROL_B_REG |= (1U << TIMER_1_CLOCK_SELECT_BIT_0);
 620:	8e b5       	in	r24, 0x2e	; 46
 622:	81 60       	ori	r24, 0x01	; 1
 624:	8e bd       	out	0x2e, r24	; 46
									TIMER_INTERRUPT_MASK_REG |= (1U << TIMER_1_OVERFLOW_INTERRUPT_ENABLE);
 626:	89 b7       	in	r24, 0x39	; 57
 628:	84 60       	ori	r24, 0x04	; 4
 62a:	89 bf       	out	0x39, r24	; 57
									Timers_status[Timer_Num] = Timer_S_Ready;
 62c:	f9 01       	movw	r30, r18
 62e:	eb 57       	subi	r30, 0x7B	; 123
 630:	ff 4f       	sbci	r31, 0xFF	; 255
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	80 83       	st	Z, r24

uint8_t Timers_status[Max_Timer_Numbers];

en_timer_Errors_t Timer_Init(en_timer_Number_t Timer_Num)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
 636:	80 e0       	ldi	r24, 0x00	; 0
					case Timer_1 :
					{
									TIMER_1_CONTROL_B_REG |= (1U << TIMER_1_CLOCK_SELECT_BIT_0);
									TIMER_INTERRUPT_MASK_REG |= (1U << TIMER_1_OVERFLOW_INTERRUPT_ENABLE);
									Timers_status[Timer_Num] = Timer_S_Ready;
									break;
 638:	08 95       	ret
					}
					case Timer_2 :
					{
									TIMER_2_CONTROL_REG |= (1U << TIMER_2_CLOCK_SELECT_BIT_0);
 63a:	85 b5       	in	r24, 0x25	; 37
 63c:	81 60       	ori	r24, 0x01	; 1
 63e:	85 bd       	out	0x25, r24	; 37
									TIMER_INTERRUPT_MASK_REG |= (1U << TIMER_2_OVERFLOW_INTERRUPT_ENABLE);
 640:	89 b7       	in	r24, 0x39	; 57
 642:	80 64       	ori	r24, 0x40	; 64
 644:	89 bf       	out	0x39, r24	; 57
									Timers_status[Timer_Num] = Timer_S_Ready;
 646:	f9 01       	movw	r30, r18
 648:	eb 57       	subi	r30, 0x7B	; 123
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	80 83       	st	Z, r24

uint8_t Timers_status[Max_Timer_Numbers];

en_timer_Errors_t Timer_Init(en_timer_Number_t Timer_Num)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
 650:	80 e0       	ldi	r24, 0x00	; 0
					case Timer_2 :
					{
									TIMER_2_CONTROL_REG |= (1U << TIMER_2_CLOCK_SELECT_BIT_0);
									TIMER_INTERRUPT_MASK_REG |= (1U << TIMER_2_OVERFLOW_INTERRUPT_ENABLE);
									Timers_status[Timer_Num] = Timer_S_Ready;
									break;
 652:	08 95       	ret
en_timer_Errors_t Timer_Init(en_timer_Number_t Timer_Num)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
		if (Timer_Num >= Max_Timer_Numbers)
		{
			en_timer_Errors = Timer_E_InvalidValue;
 654:	84 e0       	ldi	r24, 0x04	; 4
 656:	08 95       	ret
		}
		else
		{
			if (Timers_status[Timer_Num] == Timer_S_Ready)
			{
				en_timer_Errors = Timer_E_TRANSITION;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	08 95       	ret

uint8_t Timers_status[Max_Timer_Numbers];

en_timer_Errors_t Timer_Init(en_timer_Number_t Timer_Num)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
 65c:	80 e0       	ldi	r24, 0x00	; 0
					}
				}
			}
		}
	return en_timer_Errors;
}
 65e:	08 95       	ret

00000660 <Timer_Set>:

en_timer_Errors_t Timer_Set(en_timer_Number_t Timer_Num , uint16_t Timer_value)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
	
	if ((Timer_Num < Max_Timer_Numbers)		&&		
 660:	83 30       	cpi	r24, 0x03	; 3
 662:	10 f5       	brcc	.+68     	; 0x6a8 <Timer_Set+0x48>
		(Timer_value < Timers_Capacity[Timer_Num]))
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	f9 01       	movw	r30, r18
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	ed 59       	subi	r30, 0x9D	; 157
 670:	ff 4f       	sbci	r31, 0xFF	; 255
 672:	40 81       	ld	r20, Z
 674:	51 81       	ldd	r21, Z+1	; 0x01

en_timer_Errors_t Timer_Set(en_timer_Number_t Timer_Num , uint16_t Timer_value)
{
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
	
	if ((Timer_Num < Max_Timer_Numbers)		&&		
 676:	64 17       	cp	r22, r20
 678:	75 07       	cpc	r23, r21
 67a:	c0 f4       	brcc	.+48     	; 0x6ac <Timer_Set+0x4c>
		(Timer_value < Timers_Capacity[Timer_Num]))
	{
		if (Timers_status[Timer_Num] == Timer_S_Ready)
 67c:	f9 01       	movw	r30, r18
 67e:	eb 57       	subi	r30, 0x7B	; 123
 680:	ff 4f       	sbci	r31, 0xFF	; 255
 682:	90 81       	ld	r25, Z
 684:	91 30       	cpi	r25, 0x01	; 1
 686:	a1 f4       	brne	.+40     	; 0x6b0 <Timer_Set+0x50>
		{
			switch(Timer_Num)
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	39 f0       	breq	.+14     	; 0x69a <Timer_Set+0x3a>
 68c:	18 f0       	brcs	.+6      	; 0x694 <Timer_Set+0x34>
 68e:	82 30       	cpi	r24, 0x02	; 2
 690:	41 f0       	breq	.+16     	; 0x6a2 <Timer_Set+0x42>
 692:	10 c0       	rjmp	.+32     	; 0x6b4 <Timer_Set+0x54>
			{
				case Timer_0:
				{
					TIMER_0_COUNTER_REG = Timer_value;
 694:	62 bf       	out	0x32, r22	; 50
				{
					break;
				}
				
			}
			en_timer_Errors = Timer_E_OK;
 696:	80 e0       	ldi	r24, 0x00	; 0
			switch(Timer_Num)
			{
				case Timer_0:
				{
					TIMER_0_COUNTER_REG = Timer_value;
					break;
 698:	08 95       	ret
				}
				
				case Timer_1:
				{
					TIMER_1_COUNTER_REG = Timer_value;
 69a:	7d bd       	out	0x2d, r23	; 45
 69c:	6c bd       	out	0x2c, r22	; 44
				{
					break;
				}
				
			}
			en_timer_Errors = Timer_E_OK;
 69e:	80 e0       	ldi	r24, 0x00	; 0
				}
				
				case Timer_1:
				{
					TIMER_1_COUNTER_REG = Timer_value;
					break;
 6a0:	08 95       	ret
				}
				
				
				case Timer_2:
				{
					TIMER_2_COUNTER_REG = Timer_value;
 6a2:	64 bd       	out	0x24, r22	; 36
				{
					break;
				}
				
			}
			en_timer_Errors = Timer_E_OK;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
				
				
				case Timer_2:
				{
					TIMER_2_COUNTER_REG = Timer_value;
					break;
 6a6:	08 95       	ret
			en_timer_Errors = Timer_E_TRANSITION;
		}
	}
	else
	{
		en_timer_Errors = Timer_E_InvalidValue;
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	08 95       	ret
 6ac:	84 e0       	ldi	r24, 0x04	; 4
 6ae:	08 95       	ret
			}
			en_timer_Errors = Timer_E_OK;
		}
		else
		{
			en_timer_Errors = Timer_E_TRANSITION;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	08 95       	ret
				{
					break;
				}
				
			}
			en_timer_Errors = Timer_E_OK;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		en_timer_Errors = Timer_E_InvalidValue;
	}
	return en_timer_Errors;
}
 6b6:	08 95       	ret

000006b8 <timer_delay_50ms>:
}
*/


en_timer_Errors_t timer_delay_50ms(en_timer_Number_t num)
{
 6b8:	cf 93       	push	r28
	en_timer_Errors_t en_timer_Errors = Timer_E_OK;
	if (num < Max_Timer_Numbers)
 6ba:	83 30       	cpi	r24, 0x03	; 3
 6bc:	58 f4       	brcc	.+22     	; 0x6d4 <timer_delay_50ms+0x1c>
 6be:	c8 2f       	mov	r28, r24
	{
		Timer_Init(num);
 6c0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Timer_Init>
		Timer_Set(num,15536);
 6c4:	60 eb       	ldi	r22, 0xB0	; 176
 6c6:	7c e3       	ldi	r23, 0x3C	; 60
 6c8:	8c 2f       	mov	r24, r28
 6ca:	0e 94 30 03 	call	0x660	; 0x660 <Timer_Set>
		sei();
 6ce:	78 94       	sei
		
		en_timer_Errors = Timer_E_OK;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <timer_delay_50ms+0x1e>
	}
	else
	{
		en_timer_Errors = Timer_E_InvalidValue;
 6d4:	84 e0       	ldi	r24, 0x04	; 4
	}
	return en_timer_Errors;
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <button_Init>:
/*********************** Public Functions Implementation **********************/
/******************************************************************************/


void button_Init(void)
{
 6da:	ef 92       	push	r14
 6dc:	ff 92       	push	r15
 6de:	0f 93       	push	r16
 6e0:	1f 93       	push	r17
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 6e6:	10 e0       	ldi	r17, 0x00	; 0
 6e8:	26 c0       	rjmp	.+76     	; 0x736 <button_Init+0x5c>
	{
		// Set button pin as input
		DIO_ChannelSetDIR((Button_config[u8Index].ChannelId) , STD_INPUT);
 6ea:	c1 2f       	mov	r28, r17
 6ec:	d0 e0       	ldi	r29, 0x00	; 0
 6ee:	ce 01       	movw	r24, r28
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	9c 01       	movw	r18, r24
 6fa:	27 59       	subi	r18, 0x97	; 151
 6fc:	3f 4f       	sbci	r19, 0xFF	; 255
 6fe:	79 01       	movw	r14, r18
 700:	f9 01       	movw	r30, r18
 702:	00 81       	ld	r16, Z
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	80 2f       	mov	r24, r16
 708:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_ChannelSetDIR>
		
		// Enable PULLUP
		DIO_WriteChannel(Button_config[u8Index].ChannelId, STD_HIGH);
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	80 2f       	mov	r24, r16
 710:	0e 94 13 02 	call	0x426	; 0x426 <DIO_WriteChannel>
		
		eXT_INT_Enable(Button_config[u8Index].eXt_INT , EXT_INT_FALLING_EDGE);
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	f7 01       	movw	r30, r14
 718:	83 81       	ldd	r24, Z+3	; 0x03
 71a:	0e 94 9d 02 	call	0x53a	; 0x53a <eXT_INT_Enable>
		
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
 71e:	ce 01       	movw	r24, r28
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	c8 0f       	add	r28, r24
 726:	d9 1f       	adc	r29, r25
 728:	c1 58       	subi	r28, 0x81	; 129
 72a:	df 4f       	sbci	r29, 0xFF	; 255
 72c:	85 e0       	ldi	r24, 0x05	; 5
 72e:	88 83       	st	Y, r24
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
 730:	19 82       	std	Y+1, r1	; 0x01
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
 732:	1a 82       	std	Y+2, r1	; 0x02

void button_Init(void)
{
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 734:	1f 5f       	subi	r17, 0xFF	; 255
 736:	12 30       	cpi	r17, 0x02	; 2
 738:	c0 f2       	brcs	.-80     	; 0x6ea <button_Init+0x10>
		
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
	}
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	ff 90       	pop	r15
 744:	ef 90       	pop	r14
 746:	08 95       	ret

00000748 <led_OFF>:
		
	}
}
LED_ERROR_type led_OFF(LED_ID_type led)
{
	if(led > LED_NUMs)
 748:	85 30       	cpi	r24, 0x05	; 5
 74a:	68 f4       	brcc	.+26     	; 0x766 <led_OFF+0x1e>
	{
		return LED_UNDEFINED;
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_OFF);
 74c:	e8 2f       	mov	r30, r24
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	31 97       	sbiw	r30, 0x01	; 1
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	ef 58       	subi	r30, 0x8F	; 143
 758:	ff 4f       	sbci	r31, 0xFF	; 255
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	0e 94 13 02 	call	0x426	; 0x426 <DIO_WriteChannel>
	return  LED_OK;
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	08 95       	ret
}
LED_ERROR_type led_OFF(LED_ID_type led)
{
	if(led > LED_NUMs)
	{
		return LED_UNDEFINED;
 766:	81 e0       	ldi	r24, 0x01	; 1
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_OFF);
	return  LED_OK;
}
 768:	08 95       	ret

0000076a <led_ON>:
LED_ERROR_type led_ON(LED_ID_type led)
{
	if(led > LED_NUMs)
 76a:	85 30       	cpi	r24, 0x05	; 5
 76c:	68 f4       	brcc	.+26     	; 0x788 <led_ON+0x1e>
	{
		return LED_UNDEFINED;
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_ON);
 76e:	e8 2f       	mov	r30, r24
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	31 97       	sbiw	r30, 0x01	; 1
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	ef 58       	subi	r30, 0x8F	; 143
 77a:	ff 4f       	sbci	r31, 0xFF	; 255
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	80 81       	ld	r24, Z
 780:	0e 94 13 02 	call	0x426	; 0x426 <DIO_WriteChannel>
	return  LED_OK;
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	08 95       	ret
}
LED_ERROR_type led_ON(LED_ID_type led)
{
	if(led > LED_NUMs)
	{
		return LED_UNDEFINED;
 788:	81 e0       	ldi	r24, 0x01	; 1
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_ON);
	return  LED_OK;
 78a:	08 95       	ret

0000078c <led_Init>:
#include "led_cfg.h"



void led_Init(void)
{
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
	uint8_t u8_index;
	
	for (u8_index = 0 ; u8_index < LED_NUMs ; u8_index++)
 792:	10 e0       	ldi	r17, 0x00	; 0
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <led_Init+0x36>
	{
		DIO_ChannelSetDIR((LED_Config[u8_index].LED_CHANNEL_ID) , STD_OUTPUT);
 796:	c1 2f       	mov	r28, r17
 798:	d0 e0       	ldi	r29, 0x00	; 0
 79a:	cc 0f       	add	r28, r28
 79c:	dd 1f       	adc	r29, r29
 79e:	cf 58       	subi	r28, 0x8F	; 143
 7a0:	df 4f       	sbci	r29, 0xFF	; 255
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	88 81       	ld	r24, Y
 7a6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_ChannelSetDIR>
		if (LED_Config[u8_index].LED_STATE == LED_ON)
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <led_Init+0x2c>
		{
			led_ON(u8_index+1);
 7b0:	81 0f       	add	r24, r17
 7b2:	0e 94 b5 03 	call	0x76a	; 0x76a <led_ON>
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <led_Init+0x34>
		}
		else
		{
			led_OFF(u8_index+1);
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	81 0f       	add	r24, r17
 7bc:	0e 94 a4 03 	call	0x748	; 0x748 <led_OFF>

void led_Init(void)
{
	uint8_t u8_index;
	
	for (u8_index = 0 ; u8_index < LED_NUMs ; u8_index++)
 7c0:	1f 5f       	subi	r17, 0xFF	; 255
 7c2:	14 30       	cpi	r17, 0x04	; 4
 7c4:	40 f3       	brcs	.-48     	; 0x796 <led_Init+0xa>
		{
			led_OFF(u8_index+1);
		}
		
	}
}
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	08 95       	ret

000007ce <__tablejump2__>:
 7ce:	ee 0f       	add	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	05 90       	lpm	r0, Z+
 7d4:	f4 91       	lpm	r31, Z
 7d6:	e0 2d       	mov	r30, r0
 7d8:	09 94       	ijmp

000007da <_exit>:
 7da:	f8 94       	cli

000007dc <__stop_program>:
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <__stop_program>
