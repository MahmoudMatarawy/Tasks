
LED_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000758  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000758  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  000007f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001584  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a28  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be2  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  0000352c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094f  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c77  00000000  00000000  000040d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8a:	0c 94 aa 03 	jmp	0x754	; 0x754 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <appStart>:
{
	uint8_t u8_process = LED_ON;
	uint8_t u8_counter = ((uint8_t)1);
	uint8_t u8_btn_state = BT_PRE_HOLD;
	//DDRA = 0xff;
	 button_Init();
  92:	0e 94 24 03 	call	0x648	; 0x648 <button_Init>
	 led_Init();
  96:	0e 94 89 03 	call	0x712	; 0x712 <led_Init>
#include "app.h"
#include <stdint.h>
void appStart(void)
{
	uint8_t u8_process = LED_ON;
	uint8_t u8_counter = ((uint8_t)1);
  9a:	d1 e0       	ldi	r29, 0x01	; 1

#include "app.h"
#include <stdint.h>
void appStart(void)
{
	uint8_t u8_process = LED_ON;
  9c:	c1 e0       	ldi	r28, 0x01	; 1
  9e:	05 c0       	rjmp	.+10     	; 0xaa <appStart+0x18>
				led_ON(u8_counter);
				//_delay_ms(300);
				if (u8_counter == ((uint8_t)4))
				{
					u8_process = LED_OFF;
					u8_counter = ((uint8_t)1);
  a0:	d1 e0       	ldi	r29, 0x01	; 1
			{
				led_ON(u8_counter);
				//_delay_ms(300);
				if (u8_counter == ((uint8_t)4))
				{
					u8_process = LED_OFF;
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <appStart+0x18>
				led_OFF(u8_counter);
				//_delay_ms(300);
				if (u8_counter == ((uint8_t)4))
				{
					u8_process = LED_ON;
					u8_counter = ((uint8_t)1);
  a6:	d1 e0       	ldi	r29, 0x01	; 1
			{
				led_OFF(u8_counter);
				//_delay_ms(300);
				if (u8_counter == ((uint8_t)4))
				{
					u8_process = LED_ON;
  a8:	c1 e0       	ldi	r28, 0x01	; 1
	 button_Init();
	 led_Init();
	while(1)
	{
		//_delay_ms(10);
		button_Main_Task();
  aa:	0e 94 4d 03 	call	0x69a	; 0x69a <button_Main_Task>
		if (u8_process == LED_ON)
  ae:	c1 30       	cpi	r28, 0x01	; 1
  b0:	61 f4       	brne	.+24     	; 0xca <appStart+0x38>
		{
			// set leds ON one in a press
			u8_btn_state = getButtonState(Button_Start);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <getButtonState>
			//PORTA = u8_btn_state;
			if (u8_btn_state == BT_RELEASED)
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	b9 f7       	brne	.-18     	; 0xaa <appStart+0x18>
			{
				led_ON(u8_counter);
  bc:	8d 2f       	mov	r24, r29
  be:	0e 94 78 03 	call	0x6f0	; 0x6f0 <led_ON>
				//_delay_ms(300);
				if (u8_counter == ((uint8_t)4))
  c2:	d4 30       	cpi	r29, 0x04	; 4
  c4:	69 f3       	breq	.-38     	; 0xa0 <appStart+0xe>
					u8_process = LED_OFF;
					u8_counter = ((uint8_t)1);
				}
				else
				{
					u8_counter += ((uint8_t)1);
  c6:	df 5f       	subi	r29, 0xFF	; 255
  c8:	f0 cf       	rjmp	.-32     	; 0xaa <appStart+0x18>
			}
		}
		else
		{
			// set leds OFF one in a press
			u8_btn_state = getButtonState(Button_Start);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <getButtonState>
			//PORTA = u8_btn_state;
			if (u8_btn_state == BT_RELEASED)
  d0:	85 30       	cpi	r24, 0x05	; 5
  d2:	59 f7       	brne	.-42     	; 0xaa <appStart+0x18>
			{
				led_OFF(u8_counter);
  d4:	8d 2f       	mov	r24, r29
  d6:	0e 94 67 03 	call	0x6ce	; 0x6ce <led_OFF>
				//_delay_ms(300);
				if (u8_counter == ((uint8_t)4))
  da:	d4 30       	cpi	r29, 0x04	; 4
  dc:	21 f3       	breq	.-56     	; 0xa6 <appStart+0x14>
					u8_process = LED_ON;
					u8_counter = ((uint8_t)1);
				}
				else
				{
					u8_counter += ((uint8_t)1);
  de:	df 5f       	subi	r29, 0xFF	; 255
  e0:	e4 cf       	rjmp	.-56     	; 0xaa <appStart+0x18>

000000e2 <main>:
  e2:	0e 94 49 00 	call	0x92	; 0x92 <appStart>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <DIO_ChannelSetDIR>:
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
	uint8_t pinNumber = 0 ;
	
	
	if (ChannelId < DIO_MAX_PINS)
  ec:	80 32       	cpi	r24, 0x20	; 32
  ee:	a8 f5       	brcc	.+106    	; 0x15a <DIO_ChannelSetDIR+0x6e>
	{
		if (ChannelId < DIO_PORTB_Channel0)
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	58 f4       	brcc	.+22     	; 0x10a <DIO_ChannelSetDIR+0x1e>
		{
			pinNumber = ChannelId;
			DATA_DIRECTION_PORTA |= dir << pinNumber;
  f4:	9a b3       	in	r25, 0x1a	; 26
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_ChannelSetDIR+0x12>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_ChannelSetDIR+0xe>
 102:	69 2b       	or	r22, r25
 104:	6a bb       	out	0x1a, r22	; 26
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ChannelSetDIR(en_dio_channel_t ChannelId, en_dio_DIR_t dir)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
		if (ChannelId < DIO_PORTB_Channel0)
		{
			pinNumber = ChannelId;
			DATA_DIRECTION_PORTA |= dir << pinNumber;
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 10a:	80 31       	cpi	r24, 0x10	; 16
 10c:	60 f4       	brcc	.+24     	; 0x126 <DIO_ChannelSetDIR+0x3a>
		{
			pinNumber = ChannelId-PORTA_CHANNELS;
 10e:	88 50       	subi	r24, 0x08	; 8
			DATA_DIRECTION_PORTB |= dir << pinNumber;
 110:	97 b3       	in	r25, 0x17	; 23
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_ChannelSetDIR+0x2e>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	8a 95       	dec	r24
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_ChannelSetDIR+0x2a>
 11e:	69 2b       	or	r22, r25
 120:	67 bb       	out	0x17, r22	; 23
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ChannelSetDIR(en_dio_channel_t ChannelId, en_dio_DIR_t dir)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
		else if (ChannelId < DIO_PORTC_Channel0)
		{
			pinNumber = ChannelId-PORTA_CHANNELS;
			DATA_DIRECTION_PORTB |= dir << pinNumber;
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 126:	88 31       	cpi	r24, 0x18	; 24
 128:	60 f4       	brcc	.+24     	; 0x142 <DIO_ChannelSetDIR+0x56>
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS;
 12a:	80 51       	subi	r24, 0x10	; 16
			DATA_DIRECTION_PORTC |= dir << pinNumber;
 12c:	94 b3       	in	r25, 0x14	; 20
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_ChannelSetDIR+0x4a>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_ChannelSetDIR+0x46>
 13a:	69 2b       	or	r22, r25
 13c:	64 bb       	out	0x14, r22	; 20
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ChannelSetDIR(en_dio_channel_t ChannelId, en_dio_DIR_t dir)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS;
			DATA_DIRECTION_PORTC |= dir << pinNumber;
		}
		else
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS - PORTC_CHANNELS;
 142:	88 51       	subi	r24, 0x18	; 24
			DATA_DIRECTION_PORTD |= dir << pinNumber;
 144:	91 b3       	in	r25, 0x11	; 17
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_ChannelSetDIR+0x62>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	8a 95       	dec	r24
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_ChannelSetDIR+0x5e>
 152:	69 2b       	or	r22, r25
 154:	61 bb       	out	0x11, r22	; 17
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ChannelSetDIR(en_dio_channel_t ChannelId, en_dio_DIR_t dir)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
			DATA_DIRECTION_PORTD |= dir << pinNumber;
		}
		//return DIO_E_OK;
	}
	else{
		en_dio_Errors =  DIO_InvalidPin;
 15a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	
	return en_dio_Errors;
}
 15c:	08 95       	ret

0000015e <DIO_ReadChannel>:
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
	uint8_t pinNumber ;
	
	
	if (ChannelId < DIO_MAX_PINS )
 15e:	80 32       	cpi	r24, 0x20	; 32
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_ReadChannel+0x6>
 162:	69 c0       	rjmp	.+210    	; 0x236 <DIO_ReadChannel+0xd8>
	{
		if (ChannelId < DIO_PORTB_Channel0)
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	c0 f4       	brcc	.+48     	; 0x198 <DIO_ReadChannel+0x3a>
		{
			pinNumber = ChannelId;
			*level = ((RE_PORT_A & (1U<<pinNumber))>>pinNumber); 
 168:	99 b3       	in	r25, 0x19	; 25
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	a9 01       	movw	r20, r18
 170:	08 2e       	mov	r0, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_ReadChannel+0x1a>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_ReadChannel+0x16>
 17c:	29 2f       	mov	r18, r25
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	24 23       	and	r18, r20
 182:	35 23       	and	r19, r21
 184:	a9 01       	movw	r20, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_ReadChannel+0x2e>
 188:	56 95       	lsr	r21
 18a:	47 95       	ror	r20
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_ReadChannel+0x2a>
 190:	fb 01       	movw	r30, r22
 192:	40 83       	st	Z, r20
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ReadChannel(en_dio_channel_t ChannelId ,en_dio_Level_t* level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	08 95       	ret
		if (ChannelId < DIO_PORTB_Channel0)
		{
			pinNumber = ChannelId;
			*level = ((RE_PORT_A & (1U<<pinNumber))>>pinNumber); 
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 198:	80 31       	cpi	r24, 0x10	; 16
 19a:	c8 f4       	brcc	.+50     	; 0x1ce <DIO_ReadChannel+0x70>
		{
			pinNumber = ChannelId - PORTA_CHANNELS;
 19c:	88 50       	subi	r24, 0x08	; 8
			*level = ((RE_PORT_B & (1U<<pinNumber))>>pinNumber);
 19e:	96 b3       	in	r25, 0x16	; 22
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	a9 01       	movw	r20, r18
 1a6:	08 2e       	mov	r0, r24
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_ReadChannel+0x50>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_ReadChannel+0x4c>
 1b2:	29 2f       	mov	r18, r25
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	24 23       	and	r18, r20
 1b8:	35 23       	and	r19, r21
 1ba:	a9 01       	movw	r20, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_ReadChannel+0x64>
 1be:	56 95       	lsr	r21
 1c0:	47 95       	ror	r20
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_ReadChannel+0x60>
 1c6:	fb 01       	movw	r30, r22
 1c8:	40 83       	st	Z, r20
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ReadChannel(en_dio_channel_t ChannelId ,en_dio_Level_t* level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret
		else if (ChannelId < DIO_PORTC_Channel0)
		{
			pinNumber = ChannelId - PORTA_CHANNELS;
			*level = ((RE_PORT_B & (1U<<pinNumber))>>pinNumber);
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 1ce:	88 31       	cpi	r24, 0x18	; 24
 1d0:	c8 f4       	brcc	.+50     	; 0x204 <DIO_ReadChannel+0xa6>
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS;
 1d2:	80 51       	subi	r24, 0x10	; 16
			*level = ((RE_PORT_C & (1U<<pinNumber))>>pinNumber);
 1d4:	93 b3       	in	r25, 0x13	; 19
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	a9 01       	movw	r20, r18
 1dc:	08 2e       	mov	r0, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_ReadChannel+0x86>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_ReadChannel+0x82>
 1e8:	29 2f       	mov	r18, r25
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	24 23       	and	r18, r20
 1ee:	35 23       	and	r19, r21
 1f0:	a9 01       	movw	r20, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_ReadChannel+0x9a>
 1f4:	56 95       	lsr	r21
 1f6:	47 95       	ror	r20
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_ReadChannel+0x96>
 1fc:	fb 01       	movw	r30, r22
 1fe:	40 83       	st	Z, r20
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ReadChannel(en_dio_channel_t ChannelId ,en_dio_Level_t* level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS;
			*level = ((RE_PORT_C & (1U<<pinNumber))>>pinNumber);
		}
		else
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS - PORTC_CHANNELS;
 204:	88 51       	subi	r24, 0x18	; 24
			*level = ((RE_PORT_D & (1U<<pinNumber))>>pinNumber);
 206:	90 b3       	in	r25, 0x10	; 16
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	a9 01       	movw	r20, r18
 20e:	08 2e       	mov	r0, r24
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_ReadChannel+0xb8>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_ReadChannel+0xb4>
 21a:	29 2f       	mov	r18, r25
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	24 23       	and	r18, r20
 220:	35 23       	and	r19, r21
 222:	a9 01       	movw	r20, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_ReadChannel+0xcc>
 226:	56 95       	lsr	r21
 228:	47 95       	ror	r20
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_ReadChannel+0xc8>
 22e:	fb 01       	movw	r30, r22
 230:	40 83       	st	Z, r20
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_ReadChannel(en_dio_channel_t ChannelId ,en_dio_Level_t* level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
		}
		//*level &= 0x01; 
		//return DIO_E_OK;
	}
	else{
		en_dio_Errors =  DIO_InvalidPin;
 236:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return en_dio_Errors;	
}
 238:	08 95       	ret

0000023a <DIO_WriteChannel>:
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
	uint8_t pinNumber ;
	
	
	if (ChannelId < DIO_MAX_PINS )
 23a:	80 32       	cpi	r24, 0x20	; 32
 23c:	08 f0       	brcs	.+2      	; 0x240 <DIO_WriteChannel+0x6>
 23e:	85 c0       	rjmp	.+266    	; 0x34a <DIO_WriteChannel+0x110>
	{
		if (ChannelId < DIO_PORTB_Channel0)
 240:	88 30       	cpi	r24, 0x08	; 8
 242:	f8 f4       	brcc	.+62     	; 0x282 <DIO_WriteChannel+0x48>
		{
			pinNumber = ChannelId;
			if (level == STD_HIGH)
 244:	61 30       	cpi	r22, 0x01	; 1
 246:	71 f4       	brne	.+28     	; 0x264 <DIO_WriteChannel+0x2a>
			{
				WR_PORT_A |= (1U << pinNumber);
 248:	4b b3       	in	r20, 0x1b	; 27
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	b9 01       	movw	r22, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_WriteChannel+0x1c>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	8a 95       	dec	r24
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_WriteChannel+0x18>
 25a:	cb 01       	movw	r24, r22
 25c:	84 2b       	or	r24, r20
 25e:	8b bb       	out	0x1b, r24	; 27
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_A |= (1U << pinNumber);
			}
			else{
				WR_PORT_A &= ~(1U << pinNumber);
 264:	4b b3       	in	r20, 0x1b	; 27
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_WriteChannel+0x38>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	8a 95       	dec	r24
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_WriteChannel+0x34>
 276:	cb 01       	movw	r24, r22
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	8b bb       	out	0x1b, r24	; 27
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret
			}
			else{
				WR_PORT_A &= ~(1U << pinNumber);
			}
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 282:	80 31       	cpi	r24, 0x10	; 16
 284:	00 f5       	brcc	.+64     	; 0x2c6 <DIO_WriteChannel+0x8c>
		{
			pinNumber = ChannelId - PORTA_CHANNELS;
 286:	88 50       	subi	r24, 0x08	; 8
			if (level == STD_HIGH)
 288:	61 30       	cpi	r22, 0x01	; 1
 28a:	71 f4       	brne	.+28     	; 0x2a8 <DIO_WriteChannel+0x6e>
			{
				WR_PORT_B |= (1U << pinNumber);
 28c:	48 b3       	in	r20, 0x18	; 24
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_WriteChannel+0x60>
 296:	66 0f       	add	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	8a 95       	dec	r24
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_WriteChannel+0x5c>
 29e:	cb 01       	movw	r24, r22
 2a0:	84 2b       	or	r24, r20
 2a2:	88 bb       	out	0x18, r24	; 24
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_B |= (1U << pinNumber);
			}
			else{
				WR_PORT_B &= ~(1U << pinNumber);
 2a8:	48 b3       	in	r20, 0x18	; 24
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_WriteChannel+0x7c>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_WriteChannel+0x78>
 2ba:	cb 01       	movw	r24, r22
 2bc:	80 95       	com	r24
 2be:	84 23       	and	r24, r20
 2c0:	88 bb       	out	0x18, r24	; 24
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
			}
			else{
				WR_PORT_B &= ~(1U << pinNumber);
			}
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 2c6:	88 31       	cpi	r24, 0x18	; 24
 2c8:	00 f5       	brcc	.+64     	; 0x30a <DIO_WriteChannel+0xd0>
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS;
 2ca:	80 51       	subi	r24, 0x10	; 16
			if (level == STD_HIGH)
 2cc:	61 30       	cpi	r22, 0x01	; 1
 2ce:	71 f4       	brne	.+28     	; 0x2ec <DIO_WriteChannel+0xb2>
			{
				WR_PORT_C |= (1U << pinNumber);
 2d0:	45 b3       	in	r20, 0x15	; 21
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	b9 01       	movw	r22, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_WriteChannel+0xa4>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	8a 95       	dec	r24
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_WriteChannel+0xa0>
 2e2:	cb 01       	movw	r24, r22
 2e4:	84 2b       	or	r24, r20
 2e6:	85 bb       	out	0x15, r24	; 21
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_C |= (1U << pinNumber);
			}
			else{
				WR_PORT_C &= ~(1U << pinNumber);
 2ec:	45 b3       	in	r20, 0x15	; 21
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	b9 01       	movw	r22, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_WriteChannel+0xc0>
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	8a 95       	dec	r24
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_WriteChannel+0xbc>
 2fe:	cb 01       	movw	r24, r22
 300:	80 95       	com	r24
 302:	84 23       	and	r24, r20
 304:	85 bb       	out	0x15, r24	; 21
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
				WR_PORT_C &= ~(1U << pinNumber);
			}
		}
		else
		{
			pinNumber = ChannelId - PORTA_CHANNELS - PORTB_CHANNELS - PORTC_CHANNELS;
 30a:	88 51       	subi	r24, 0x18	; 24
			if (level == STD_HIGH)
 30c:	61 30       	cpi	r22, 0x01	; 1
 30e:	71 f4       	brne	.+28     	; 0x32c <DIO_WriteChannel+0xf2>
			{
				WR_PORT_D |= (1U << pinNumber);
 310:	42 b3       	in	r20, 0x12	; 18
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_WriteChannel+0xe4>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_WriteChannel+0xe0>
 322:	cb 01       	movw	r24, r22
 324:	84 2b       	or	r24, r20
 326:	82 bb       	out	0x12, r24	; 18
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_D |= (1U << pinNumber);
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
 32c:	42 b3       	in	r20, 0x12	; 18
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_WriteChannel+0x100>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	8a 95       	dec	r24
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_WriteChannel+0xfc>
 33e:	cb 01       	movw	r24, r22
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	82 bb       	out	0x12, r24	; 18
*								DIO_InvalidPin if the ChannelId is valid Id*/
/*    Requirment              : None */
/*****************************************************************************************/
en_dio_Errors_t DIO_WriteChannel(en_dio_channel_t ChannelId, en_dio_Level_t level)
{
	en_dio_Errors_t en_dio_Errors = DIO_E_OK;
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	08 95       	ret
			}
		}
		//return DIO_E_OK;
	}
	else{
		en_dio_Errors = DIO_InvalidPin;
 34a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return en_dio_Errors;
 34c:	08 95       	ret

0000034e <vidPrePushState>:




static void vidPrePushState(Button_IdType enuBtnId)
{
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	1f 92       	push	r1
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_ReadChannel(Button_config[enuBtnId].ChannelId,&u8BtnValue);
 35c:	08 2f       	mov	r16, r24
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	f8 01       	movw	r30, r16
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	e0 0f       	add	r30, r16
 368:	f1 1f       	adc	r31, r17
 36a:	e0 5a       	subi	r30, 0xA0	; 160
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	be 01       	movw	r22, r28
 370:	6f 5f       	subi	r22, 0xFF	; 255
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	80 81       	ld	r24, Z
 376:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	51 f4       	brne	.+20     	; 0x394 <vidPrePushState+0x46>
	{
		strBtnInfo[enuBtnId].btn_state    = BT_PUSHED;
 380:	f8 01       	movw	r30, r16
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	0e 0f       	add	r16, r30
 388:	1f 1f       	adc	r17, r31
 38a:	f8 01       	movw	r30, r16
 38c:	e4 59       	subi	r30, 0x94	; 148
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
 390:	80 83       	st	Z, r24
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <vidPrePushState+0x58>
	}
	else
	{
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 394:	f8 01       	movw	r30, r16
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	0e 0f       	add	r16, r30
 39c:	1f 1f       	adc	r17, r31
 39e:	f8 01       	movw	r30, r16
 3a0:	e4 59       	subi	r30, 0x94	; 148
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	10 82       	st	Z, r1
	}
}
 3a6:	0f 90       	pop	r0
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	08 95       	ret

000003b2 <vidPushState>:



static void vidPushState(Button_IdType enuBtnId)
{
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 3c0:	08 2f       	mov	r16, r24
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	f8 01       	movw	r30, r16
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	e0 0f       	add	r30, r16
 3cc:	f1 1f       	adc	r31, r17
 3ce:	e0 5a       	subi	r30, 0xA0	; 160
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	be 01       	movw	r22, r28
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	80 81       	ld	r24, Z
 3da:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	59 f4       	brne	.+22     	; 0x3fa <vidPushState+0x48>
	{
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_HOLD;
 3e4:	f8 01       	movw	r30, r16
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	0e 0f       	add	r16, r30
 3ec:	1f 1f       	adc	r17, r31
 3ee:	f8 01       	movw	r30, r16
 3f0:	e4 59       	subi	r30, 0x94	; 148
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	80 83       	st	Z, r24
 3f8:	0a c0       	rjmp	.+20     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	}
	else
	{
		strBtnInfo[enuBtnId].btn_state = BT_RELEASED;
 3fa:	f8 01       	movw	r30, r16
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	0e 0f       	add	r16, r30
 402:	1f 1f       	adc	r17, r31
 404:	f8 01       	movw	r30, r16
 406:	e4 59       	subi	r30, 0x94	; 148
 408:	ff 4f       	sbci	r31, 0xFF	; 255
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	80 83       	st	Z, r24
	}
}
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	08 95       	ret

0000041a <vidPreHoldState>:


static void vidPreHoldState(Button_IdType enuBtnId)
{
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	1f 92       	push	r1
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 428:	08 2f       	mov	r16, r24
 42a:	10 e0       	ldi	r17, 0x00	; 0
 42c:	f8 01       	movw	r30, r16
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	e0 0f       	add	r30, r16
 434:	f1 1f       	adc	r31, r17
 436:	e0 5a       	subi	r30, 0xA0	; 160
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	be 01       	movw	r22, r28
 43c:	6f 5f       	subi	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	80 81       	ld	r24, Z
 442:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	59 f4       	brne	.+22     	; 0x462 <vidPreHoldState+0x48>
	{
		strBtnInfo[enuBtnId].btn_state   = BT_HOLD;
 44c:	f8 01       	movw	r30, r16
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	0e 0f       	add	r16, r30
 454:	1f 1f       	adc	r17, r31
 456:	f8 01       	movw	r30, r16
 458:	e4 59       	subi	r30, 0x94	; 148
 45a:	ff 4f       	sbci	r31, 0xFF	; 255
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	80 83       	st	Z, r24
 460:	0a c0       	rjmp	.+20     	; 0x476 <vidPreHoldState+0x5c>
	}
	else
	{
		strBtnInfo[enuBtnId].btn_state    = BT_RELEASED;
 462:	f8 01       	movw	r30, r16
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	0e 0f       	add	r16, r30
 46a:	1f 1f       	adc	r17, r31
 46c:	f8 01       	movw	r30, r16
 46e:	e4 59       	subi	r30, 0x94	; 148
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	80 83       	st	Z, r24
	}
}
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <vidHoldState>:



static void vidHoldState(Button_IdType enuBtnId)
{
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	1f 92       	push	r1
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 490:	08 2f       	mov	r16, r24
 492:	10 e0       	ldi	r17, 0x00	; 0
 494:	f8 01       	movw	r30, r16
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	e0 0f       	add	r30, r16
 49c:	f1 1f       	adc	r31, r17
 49e:	e0 5a       	subi	r30, 0xA0	; 160
 4a0:	ff 4f       	sbci	r31, 0xFF	; 255
 4a2:	be 01       	movw	r22, r28
 4a4:	6f 5f       	subi	r22, 0xFF	; 255
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	80 81       	ld	r24, Z
 4aa:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	e1 f4       	brne	.+56     	; 0x4ec <vidHoldState+0x6a>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
 4b4:	c8 01       	movw	r24, r16
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	80 0f       	add	r24, r16
 4bc:	91 1f       	adc	r25, r17
 4be:	fc 01       	movw	r30, r24
 4c0:	e4 59       	subi	r30, 0x94	; 148
 4c2:	ff 4f       	sbci	r31, 0xFF	; 255
 4c4:	21 81       	ldd	r18, Z+1	; 0x01
 4c6:	2f 5f       	subi	r18, 0xFF	; 255
 4c8:	21 83       	std	Z+1, r18	; 0x01
		if(strBtnInfo[enuBtnId].u8DebounceThreshold == Button_config[enuBtnId].u8DebounceThreshold)
 4ca:	fc 01       	movw	r30, r24
 4cc:	e0 5a       	subi	r30, 0xA0	; 160
 4ce:	ff 4f       	sbci	r31, 0xFF	; 255
 4d0:	81 81       	ldd	r24, Z+1	; 0x01
 4d2:	28 13       	cpse	r18, r24
 4d4:	0b c0       	rjmp	.+22     	; 0x4ec <vidHoldState+0x6a>
		{
			strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 4d6:	f8 01       	movw	r30, r16
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	0e 0f       	add	r16, r30
 4de:	1f 1f       	adc	r17, r31
 4e0:	f8 01       	movw	r30, r16
 4e2:	e4 59       	subi	r30, 0x94	; 148
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	11 82       	std	Z+1, r1	; 0x01
			strBtnInfo[enuBtnId].btn_state    = BT_PRE_RELEASE;
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	80 83       	st	Z, r24
	}
	else
	{
		/* Do Nothing */
	}
}
 4ec:	0f 90       	pop	r0
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <vidPreReleaseState>:



static void vidPreReleaseState(Button_IdType enuBtnId)
{
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	1f 92       	push	r1
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 506:	08 2f       	mov	r16, r24
 508:	10 e0       	ldi	r17, 0x00	; 0
 50a:	f8 01       	movw	r30, r16
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	e0 0f       	add	r30, r16
 512:	f1 1f       	adc	r31, r17
 514:	e0 5a       	subi	r30, 0xA0	; 160
 516:	ff 4f       	sbci	r31, 0xFF	; 255
 518:	be 01       	movw	r22, r28
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	80 81       	ld	r24, Z
 520:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	61 f4       	brne	.+24     	; 0x542 <vidPreReleaseState+0x4a>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
 52a:	f8 01       	movw	r30, r16
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	0e 0f       	add	r16, r30
 532:	1f 1f       	adc	r17, r31
 534:	f8 01       	movw	r30, r16
 536:	e4 59       	subi	r30, 0x94	; 148
 538:	ff 4f       	sbci	r31, 0xFF	; 255
 53a:	81 81       	ldd	r24, Z+1	; 0x01
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	81 83       	std	Z+1, r24	; 0x01
 540:	2a c0       	rjmp	.+84     	; 0x596 <vidPreReleaseState+0x9e>
	}
	else
	{
		if(strBtnInfo[enuBtnId].u8DebounceThreshold >= Button_config[enuBtnId].u8DebounceThreshold)
 542:	c8 01       	movw	r24, r16
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	80 0f       	add	r24, r16
 54a:	91 1f       	adc	r25, r17
 54c:	fc 01       	movw	r30, r24
 54e:	e4 59       	subi	r30, 0x94	; 148
 550:	ff 4f       	sbci	r31, 0xFF	; 255
 552:	21 81       	ldd	r18, Z+1	; 0x01
 554:	fc 01       	movw	r30, r24
 556:	e0 5a       	subi	r30, 0xA0	; 160
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	28 17       	cp	r18, r24
 55e:	50 f0       	brcs	.+20     	; 0x574 <vidPreReleaseState+0x7c>
		{
			strBtnInfo[enuBtnId].btn_state = BT_RELEASED;
 560:	f8 01       	movw	r30, r16
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	e0 0f       	add	r30, r16
 568:	f1 1f       	adc	r31, r17
 56a:	e4 59       	subi	r30, 0x94	; 148
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	80 83       	st	Z, r24
 572:	08 c0       	rjmp	.+16     	; 0x584 <vidPreReleaseState+0x8c>
		}
		else
		{
			strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 574:	f8 01       	movw	r30, r16
 576:	ee 0f       	add	r30, r30
 578:	ff 1f       	adc	r31, r31
 57a:	e0 0f       	add	r30, r16
 57c:	f1 1f       	adc	r31, r17
 57e:	e4 59       	subi	r30, 0x94	; 148
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	10 82       	st	Z, r1
		}
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 584:	f8 01       	movw	r30, r16
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	0e 0f       	add	r16, r30
 58c:	1f 1f       	adc	r17, r31
 58e:	f8 01       	movw	r30, r16
 590:	e4 59       	subi	r30, 0x94	; 148
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	11 82       	std	Z+1, r1	; 0x01
		
	}
}
 596:	0f 90       	pop	r0
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <vidReleaseState>:




static void vidReleaseState(Button_IdType enuBtnId)
{
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	1f 92       	push	r1
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 5b0:	08 2f       	mov	r16, r24
 5b2:	10 e0       	ldi	r17, 0x00	; 0
 5b4:	f8 01       	movw	r30, r16
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	e0 0f       	add	r30, r16
 5bc:	f1 1f       	adc	r31, r17
 5be:	e0 5a       	subi	r30, 0xA0	; 160
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	be 01       	movw	r22, r28
 5c4:	6f 5f       	subi	r22, 0xFF	; 255
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	80 81       	ld	r24, Z
 5ca:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_ReadChannel>
	
	if(u8BtnValue == BT_PUSH_LEVEL)
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	81 11       	cpse	r24, r1
 5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <vidReleaseState+0x44>
	{
		//strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 5d4:	f8 01       	movw	r30, r16
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	0e 0f       	add	r16, r30
 5dc:	1f 1f       	adc	r17, r31
 5de:	f8 01       	movw	r30, r16
 5e0:	e4 59       	subi	r30, 0x94	; 148
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	10 82       	st	Z, r1
	}
	else
	{
		/* Do nothing */
	}
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	08 95       	ret

000005f2 <vidUpdateBtnState>:



static void  vidUpdateBtnState(Button_IdType enuBtnId)
{
	switch(strBtnInfo[enuBtnId].btn_state)
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	f9 01       	movw	r30, r18
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	2e 0f       	add	r18, r30
 5fe:	3f 1f       	adc	r19, r31
 600:	f9 01       	movw	r30, r18
 602:	e4 59       	subi	r30, 0x94	; 148
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	90 81       	ld	r25, Z
 608:	92 30       	cpi	r25, 0x02	; 2
 60a:	91 f0       	breq	.+36     	; 0x630 <vidUpdateBtnState+0x3e>
 60c:	28 f4       	brcc	.+10     	; 0x618 <vidUpdateBtnState+0x26>
 60e:	99 23       	and	r25, r25
 610:	49 f0       	breq	.+18     	; 0x624 <vidUpdateBtnState+0x32>
 612:	91 30       	cpi	r25, 0x01	; 1
 614:	51 f0       	breq	.+20     	; 0x62a <vidUpdateBtnState+0x38>
 616:	08 95       	ret
 618:	94 30       	cpi	r25, 0x04	; 4
 61a:	81 f0       	breq	.+32     	; 0x63c <vidUpdateBtnState+0x4a>
 61c:	60 f0       	brcs	.+24     	; 0x636 <vidUpdateBtnState+0x44>
 61e:	95 30       	cpi	r25, 0x05	; 5
 620:	81 f0       	breq	.+32     	; 0x642 <vidUpdateBtnState+0x50>
 622:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(enuBtnId);
 624:	0e 94 a7 01 	call	0x34e	; 0x34e <vidPrePushState>
		break;
 628:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(enuBtnId);
 62a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <vidPushState>
		break;
 62e:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(enuBtnId);
 630:	0e 94 0d 02 	call	0x41a	; 0x41a <vidPreHoldState>
		break;
 634:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(enuBtnId);
 636:	0e 94 41 02 	call	0x482	; 0x482 <vidHoldState>
		break;
 63a:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(enuBtnId);
 63c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <vidPreReleaseState>
		break;
 640:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(enuBtnId);
 642:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vidReleaseState>
 646:	08 95       	ret

00000648 <button_Init>:
/*********************** Public Functions Implementation **********************/
/******************************************************************************/


void button_Init(void)
{
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 650:	10 e0       	ldi	r17, 0x00	; 0
 652:	1c c0       	rjmp	.+56     	; 0x68c <button_Init+0x44>
	{
		// Set button pin as input
		DIO_ChannelSetDIR((Button_config[u8Index].ChannelId) , STD_INPUT);
 654:	81 2f       	mov	r24, r17
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	ee 0f       	add	r30, r30
 65c:	ff 1f       	adc	r31, r31
 65e:	ef 01       	movw	r28, r30
 660:	c8 0f       	add	r28, r24
 662:	d9 1f       	adc	r29, r25
 664:	fe 01       	movw	r30, r28
 666:	e0 5a       	subi	r30, 0xA0	; 160
 668:	ff 4f       	sbci	r31, 0xFF	; 255
 66a:	00 81       	ld	r16, Z
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	80 2f       	mov	r24, r16
 670:	0e 94 76 00 	call	0xec	; 0xec <DIO_ChannelSetDIR>
		
		// Enable PULLUP
		DIO_WriteChannel(Button_config[u8Index].ChannelId, STD_HIGH);
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	80 2f       	mov	r24, r16
 678:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WriteChannel>
		
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
 67c:	fe 01       	movw	r30, r28
 67e:	e4 59       	subi	r30, 0x94	; 148
 680:	ff 4f       	sbci	r31, 0xFF	; 255
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	80 83       	st	Z, r24
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
 686:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
 688:	12 82       	std	Z+2, r1	; 0x02

void button_Init(void)
{
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 68a:	1f 5f       	subi	r17, 0xFF	; 255
 68c:	11 23       	and	r17, r17
 68e:	11 f3       	breq	.-60     	; 0x654 <button_Init+0xc>
		
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
	}
}
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	08 95       	ret

0000069a <button_Main_Task>:



void button_Main_Task(void)
{
 69a:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 69c:	c0 e0       	ldi	r28, 0x00	; 0
 69e:	04 c0       	rjmp	.+8      	; 0x6a8 <button_Main_Task+0xe>
	{
		vidUpdateBtnState((Button_IdType)u8Index);
 6a0:	8c 2f       	mov	r24, r28
 6a2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vidUpdateBtnState>
void button_Main_Task(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 6a6:	cf 5f       	subi	r28, 0xFF	; 255
 6a8:	cc 23       	and	r28, r28
 6aa:	d1 f3       	breq	.-12     	; 0x6a0 <button_Main_Task+0x6>
	{
		vidUpdateBtnState((Button_IdType)u8Index);
	}
}
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <getButtonState>:

Button_StateType getButtonState(Button_IdType enmButtonId)
{
	Button_StateType enuReturn;
	
	if(enmButtonId < BUTTONS_NUM)
 6b0:	81 11       	cpse	r24, r1
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <getButtonState+0x1a>
	{
		enuReturn = strBtnInfo[enmButtonId].btn_state ;
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	fc 01       	movw	r30, r24
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	8e 0f       	add	r24, r30
 6be:	9f 1f       	adc	r25, r31
 6c0:	fc 01       	movw	r30, r24
 6c2:	e4 59       	subi	r30, 0x94	; 148
 6c4:	ff 4f       	sbci	r31, 0xFF	; 255
 6c6:	80 81       	ld	r24, Z
 6c8:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
 6ca:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
 6cc:	08 95       	ret

000006ce <led_OFF>:
		
	}
}
LED_ERROR_type led_OFF(LED_ID_type led)
{
	if(led > LED_NUMs)
 6ce:	85 30       	cpi	r24, 0x05	; 5
 6d0:	68 f4       	brcc	.+26     	; 0x6ec <led_OFF+0x1e>
	{
		return LED_UNDEFINED;
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_OFF);
 6d2:	e8 2f       	mov	r30, r24
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	31 97       	sbiw	r30, 0x01	; 1
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	ed 59       	subi	r30, 0x9D	; 157
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WriteChannel>
	return  LED_OK;
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	08 95       	ret
}
LED_ERROR_type led_OFF(LED_ID_type led)
{
	if(led > LED_NUMs)
	{
		return LED_UNDEFINED;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_OFF);
	return  LED_OK;
}
 6ee:	08 95       	ret

000006f0 <led_ON>:
LED_ERROR_type led_ON(LED_ID_type led)
{
	if(led > LED_NUMs)
 6f0:	85 30       	cpi	r24, 0x05	; 5
 6f2:	68 f4       	brcc	.+26     	; 0x70e <led_ON+0x1e>
	{
		return LED_UNDEFINED;
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_ON);
 6f4:	e8 2f       	mov	r30, r24
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	31 97       	sbiw	r30, 0x01	; 1
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	ed 59       	subi	r30, 0x9D	; 157
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	61 e0       	ldi	r22, 0x01	; 1
 704:	80 81       	ld	r24, Z
 706:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WriteChannel>
	return  LED_OK;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	08 95       	ret
}
LED_ERROR_type led_ON(LED_ID_type led)
{
	if(led > LED_NUMs)
	{
		return LED_UNDEFINED;
 70e:	81 e0       	ldi	r24, 0x01	; 1
	}
	DIO_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_ON);
	return  LED_OK;
 710:	08 95       	ret

00000712 <led_Init>:
#include "led_cfg.h"



void led_Init(void)
{
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
	uint8_t u8_index;
	
	for (u8_index = 0 ; u8_index < LED_NUMs ; u8_index++)
 718:	10 e0       	ldi	r17, 0x00	; 0
 71a:	16 c0       	rjmp	.+44     	; 0x748 <led_Init+0x36>
	{
		DIO_ChannelSetDIR((LED_Config[u8_index].LED_CHANNEL_ID) , STD_OUTPUT);
 71c:	c1 2f       	mov	r28, r17
 71e:	d0 e0       	ldi	r29, 0x00	; 0
 720:	cc 0f       	add	r28, r28
 722:	dd 1f       	adc	r29, r29
 724:	cd 59       	subi	r28, 0x9D	; 157
 726:	df 4f       	sbci	r29, 0xFF	; 255
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	88 81       	ld	r24, Y
 72c:	0e 94 76 00 	call	0xec	; 0xec <DIO_ChannelSetDIR>
		if (LED_Config[u8_index].LED_STATE == LED_ON)
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	21 f4       	brne	.+8      	; 0x73e <led_Init+0x2c>
		{
			led_ON(u8_index+1);
 736:	81 0f       	add	r24, r17
 738:	0e 94 78 03 	call	0x6f0	; 0x6f0 <led_ON>
 73c:	04 c0       	rjmp	.+8      	; 0x746 <led_Init+0x34>
		}
		else
		{
			led_OFF(u8_index+1);
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	81 0f       	add	r24, r17
 742:	0e 94 67 03 	call	0x6ce	; 0x6ce <led_OFF>

void led_Init(void)
{
	uint8_t u8_index;
	
	for (u8_index = 0 ; u8_index < LED_NUMs ; u8_index++)
 746:	1f 5f       	subi	r17, 0xFF	; 255
 748:	14 30       	cpi	r17, 0x04	; 4
 74a:	40 f3       	brcs	.-48     	; 0x71c <led_Init+0xa>
		{
			led_OFF(u8_index+1);
		}
		
	}
}
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	08 95       	ret

00000754 <_exit>:
 754:	f8 94       	cli

00000756 <__stop_program>:
 756:	ff cf       	rjmp	.-2      	; 0x756 <__stop_program>
