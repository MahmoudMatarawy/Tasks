
LED_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800084  00800084  00000614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cec  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000809  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f9  00000000  00000000  00001c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a3  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/DIO/DIO.h"
#include "Onboard/Button/Button.h"
int main(void)
{
	uint8_t data;
	 Dio_Init();
  92:	0e 94 5e 00 	call	0xbc	; 0xbc <Dio_Init>
	 button_Init();
  96:	0e 94 7f 02 	call	0x4fe	; 0x4fe <button_Init>
    {
		//Dio_ReadChannel(DIO_PORTC_Channel2,&data);
		//Dio_WriteChannel(DIO_PORTB_Channel0 , data);
		//PORTB = ((PINC&(1U<<PINC2))>>PINC2);
		//data = 0;
		button_Main_Task();
  9a:	0e 94 92 02 	call	0x524	; 0x524 <button_Main_Task>
		data = getButtonState(0);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 9d 02 	call	0x53a	; 0x53a <getButtonState>
		//PORTB = data;
		
		if (data == BT_RELEASED)
  a4:	85 30       	cpi	r24, 0x05	; 5
  a6:	19 f4       	brne	.+6      	; 0xae <main+0x1c>
		{
			PORTB = 1<<1;
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	f6 cf       	rjmp	.-20     	; 0x9a <main+0x8>
		}
		else if (data == BT_PRE_PUSH)
  ae:	81 11       	cpse	r24, r1
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <main+0x26>
		{
			PORTB = 1 << 2;
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <main+0x8>
			
		}
		else{
			PORTB = 0;
  b8:	18 ba       	out	0x18, r1	; 24
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x8>

000000bc <Dio_Init>:
/*    Return value            : None */
/*    Requirment              : None */
/*****************************************************************************************/
void Dio_Init(void)
{
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	07 c0       	rjmp	.+14     	; 0xce <Dio_Init+0x12>
	{
		DATA_DIRECTION_PORTA = DIO_Config[u8_Counter];
  c0:	e8 2f       	mov	r30, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	90 81       	ld	r25, Z
  ca:	9a bb       	out	0x1a, r25	; 26
/*    Return value            : None */
/*    Requirment              : None */
/*****************************************************************************************/
void Dio_Init(void)
{
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	b8 f3       	brcs	.-18     	; 0xc0 <Dio_Init+0x4>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <Dio_Init+0x28>
	{
		DATA_DIRECTION_PORTA = DIO_Config[u8_Counter];
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
	{
		DATA_DIRECTION_PORTB = DIO_Config[u8_Counter+8];
  d6:	e8 2f       	mov	r30, r24
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	e8 59       	subi	r30, 0x98	; 152
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	90 81       	ld	r25, Z
  e0:	97 bb       	out	0x17, r25	; 23
{
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
	{
		DATA_DIRECTION_PORTA = DIO_Config[u8_Counter];
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	b8 f3       	brcs	.-18     	; 0xd6 <Dio_Init+0x1a>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	07 c0       	rjmp	.+14     	; 0xfa <Dio_Init+0x3e>
	{
		DATA_DIRECTION_PORTB = DIO_Config[u8_Counter+8];
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
	{
		DATA_DIRECTION_PORTC = DIO_Config[u8_Counter+16];
  ec:	e8 2f       	mov	r30, r24
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e0 59       	subi	r30, 0x90	; 144
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	90 81       	ld	r25, Z
  f6:	94 bb       	out	0x14, r25	; 20
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
	{
		DATA_DIRECTION_PORTB = DIO_Config[u8_Counter+8];
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	b8 f3       	brcs	.-18     	; 0xec <Dio_Init+0x30>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <Dio_Init+0x54>
	{
		DATA_DIRECTION_PORTC = DIO_Config[u8_Counter+16];
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
	{
		DATA_DIRECTION_PORTD = DIO_Config[u8_Counter+24];
 102:	e8 2f       	mov	r30, r24
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e8 58       	subi	r30, 0x88	; 136
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	90 81       	ld	r25, Z
 10c:	91 bb       	out	0x11, r25	; 17
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
	{
		DATA_DIRECTION_PORTC = DIO_Config[u8_Counter+16];
	}
	for (uint8_t u8_Counter = 0 ; u8_Counter < 8 ; u8_Counter++)
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	88 30       	cpi	r24, 0x08	; 8
 112:	b8 f3       	brcs	.-18     	; 0x102 <Dio_Init+0x46>
	{
		DATA_DIRECTION_PORTD = DIO_Config[u8_Counter+24];
	}
}
 114:	08 95       	ret

00000116 <Dio_ReadChannel>:
DIO_Errors Dio_ReadChannel(Dio_ChannelType ChannelId ,Dio_LevelType* level)
{
	uint8_t pinNumber ;
	
	
	if (ChannelId < DIO_MAX_PINS )
 116:	80 32       	cpi	r24, 0x20	; 32
 118:	08 f0       	brcs	.+2      	; 0x11c <Dio_ReadChannel+0x6>
 11a:	6a c0       	rjmp	.+212    	; 0x1f0 <Dio_ReadChannel+0xda>
	{
		if (ChannelId < DIO_PORTB_Channel0)
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	b8 f4       	brcc	.+46     	; 0x14e <Dio_ReadChannel+0x38>
		{
			pinNumber = ChannelId;
			*level = ((RE_PORT_A & (1U<<pinNumber))>>pinNumber); 
 120:	99 b3       	in	r25, 0x19	; 25
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	a9 01       	movw	r20, r18
 128:	08 2e       	mov	r0, r24
 12a:	02 c0       	rjmp	.+4      	; 0x130 <Dio_ReadChannel+0x1a>
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <Dio_ReadChannel+0x16>
 134:	29 2f       	mov	r18, r25
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	24 23       	and	r18, r20
 13a:	35 23       	and	r19, r21
 13c:	a9 01       	movw	r20, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <Dio_ReadChannel+0x2e>
 140:	56 95       	lsr	r21
 142:	47 95       	ror	r20
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <Dio_ReadChannel+0x2a>
 148:	fb 01       	movw	r30, r22
 14a:	40 83       	st	Z, r20
 14c:	4b c0       	rjmp	.+150    	; 0x1e4 <Dio_ReadChannel+0xce>
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 14e:	80 31       	cpi	r24, 0x10	; 16
 150:	c0 f4       	brcc	.+48     	; 0x182 <Dio_ReadChannel+0x6c>
		{
			pinNumber = ChannelId-8;
 152:	88 50       	subi	r24, 0x08	; 8
			*level = ((RE_PORT_B & (1U<<pinNumber))>>pinNumber);
 154:	96 b3       	in	r25, 0x16	; 22
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	a9 01       	movw	r20, r18
 15c:	08 2e       	mov	r0, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Dio_ReadChannel+0x4e>
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <Dio_ReadChannel+0x4a>
 168:	29 2f       	mov	r18, r25
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	24 23       	and	r18, r20
 16e:	35 23       	and	r19, r21
 170:	a9 01       	movw	r20, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <Dio_ReadChannel+0x62>
 174:	56 95       	lsr	r21
 176:	47 95       	ror	r20
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <Dio_ReadChannel+0x5e>
 17c:	fb 01       	movw	r30, r22
 17e:	40 83       	st	Z, r20
 180:	31 c0       	rjmp	.+98     	; 0x1e4 <Dio_ReadChannel+0xce>
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 182:	88 31       	cpi	r24, 0x18	; 24
 184:	c0 f4       	brcc	.+48     	; 0x1b6 <Dio_ReadChannel+0xa0>
		{
			pinNumber = ChannelId-16;
 186:	80 51       	subi	r24, 0x10	; 16
			*level = ((RE_PORT_C & (1U<<pinNumber))>>pinNumber);
 188:	93 b3       	in	r25, 0x13	; 19
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	a9 01       	movw	r20, r18
 190:	08 2e       	mov	r0, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_ReadChannel+0x82>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_ReadChannel+0x7e>
 19c:	29 2f       	mov	r18, r25
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	24 23       	and	r18, r20
 1a2:	35 23       	and	r19, r21
 1a4:	a9 01       	movw	r20, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Dio_ReadChannel+0x96>
 1a8:	56 95       	lsr	r21
 1aa:	47 95       	ror	r20
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <Dio_ReadChannel+0x92>
 1b0:	fb 01       	movw	r30, r22
 1b2:	40 83       	st	Z, r20
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <Dio_ReadChannel+0xce>
		}
		else
		{
			pinNumber = ChannelId-24;
 1b6:	88 51       	subi	r24, 0x18	; 24
			*level = ((RE_PORT_D & (1U<<pinNumber))>>pinNumber);
 1b8:	90 b3       	in	r25, 0x10	; 16
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	a9 01       	movw	r20, r18
 1c0:	08 2e       	mov	r0, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Dio_ReadChannel+0xb2>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <Dio_ReadChannel+0xae>
 1cc:	29 2f       	mov	r18, r25
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	24 23       	and	r18, r20
 1d2:	35 23       	and	r19, r21
 1d4:	a9 01       	movw	r20, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Dio_ReadChannel+0xc6>
 1d8:	56 95       	lsr	r21
 1da:	47 95       	ror	r20
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <Dio_ReadChannel+0xc2>
 1e0:	fb 01       	movw	r30, r22
 1e2:	40 83       	st	Z, r20
		}
		*level &= 0x01; 
 1e4:	fb 01       	movw	r30, r22
 1e6:	80 81       	ld	r24, Z
 1e8:	81 70       	andi	r24, 0x01	; 1
 1ea:	80 83       	st	Z, r24
		return DIO_E_OK;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
	}
	else{
		return DIO_InvalidPin;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
	}
		
}
 1f2:	08 95       	ret

000001f4 <vidPrePushState>:




static void vidPrePushState(Button_IdType enuBtnId)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	1f 92       	push	r1
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId,&u8BtnValue);
 202:	08 2f       	mov	r16, r24
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	f8 01       	movw	r30, r16
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	e0 0f       	add	r30, r16
 20e:	f1 1f       	adc	r31, r17
 210:	e0 58       	subi	r30, 0x80	; 128
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	be 01       	movw	r22, r28
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	80 81       	ld	r24, Z
 21c:	0e 94 8b 00 	call	0x116	; 0x116 <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	61 f4       	brne	.+24     	; 0x23e <vidPrePushState+0x4a>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 226:	f8 01       	movw	r30, r16
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	0e 0f       	add	r16, r30
 22e:	1f 1f       	adc	r17, r31
 230:	f8 01       	movw	r30, r16
 232:	ec 57       	subi	r30, 0x7C	; 124
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_RELEASE;
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	80 83       	st	Z, r24
 23c:	1b c0       	rjmp	.+54     	; 0x274 <vidPrePushState+0x80>
	}
	else
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
 23e:	c8 01       	movw	r24, r16
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	80 0f       	add	r24, r16
 246:	91 1f       	adc	r25, r17
 248:	fc 01       	movw	r30, r24
 24a:	ec 57       	subi	r30, 0x7C	; 124
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	21 81       	ldd	r18, Z+1	; 0x01
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	21 83       	std	Z+1, r18	; 0x01
		
		if(strBtnInfo[enuBtnId].u8DebounceThreshold ==
		Button_config[enuBtnId].u8DebounceThreshold)
 254:	fc 01       	movw	r30, r24
 256:	e0 58       	subi	r30, 0x80	; 128
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	81 81       	ldd	r24, Z+1	; 0x01
	}
	else
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
		
		if(strBtnInfo[enuBtnId].u8DebounceThreshold ==
 25c:	28 13       	cpse	r18, r24
 25e:	0a c0       	rjmp	.+20     	; 0x274 <vidPrePushState+0x80>
		Button_config[enuBtnId].u8DebounceThreshold)
		{
			strBtnInfo[enuBtnId].btn_state    = BT_PUSHED;
 260:	f8 01       	movw	r30, r16
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	0e 0f       	add	r16, r30
 268:	1f 1f       	adc	r17, r31
 26a:	f8 01       	movw	r30, r16
 26c:	ec 57       	subi	r30, 0x7C	; 124
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 83       	st	Z, r24
		else
		{
			/* Do Nothing */
		}
	}
}
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <vidPushState>:



static void vidPushState(Button_IdType enuBtnId)
{
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	1f 92       	push	r1
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 28e:	08 2f       	mov	r16, r24
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	f8 01       	movw	r30, r16
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	e0 0f       	add	r30, r16
 29a:	f1 1f       	adc	r31, r17
 29c:	e0 58       	subi	r30, 0x80	; 128
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	80 81       	ld	r24, Z
 2a8:	0e 94 8b 00 	call	0x116	; 0x116 <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	61 f4       	brne	.+24     	; 0x2ca <vidPushState+0x4a>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 2b2:	f8 01       	movw	r30, r16
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	0e 0f       	add	r16, r30
 2ba:	1f 1f       	adc	r17, r31
 2bc:	f8 01       	movw	r30, r16
 2be:	ec 57       	subi	r30, 0x7C	; 124
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_RELEASE;
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	80 83       	st	Z, r24
 2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <vidPushState+0x60>
	}
	else
	{
		strBtnInfo[enuBtnId].u8HoldThreshold  = ((uint8_t)0);
 2ca:	f8 01       	movw	r30, r16
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	0e 0f       	add	r16, r30
 2d2:	1f 1f       	adc	r17, r31
 2d4:	f8 01       	movw	r30, r16
 2d6:	ec 57       	subi	r30, 0x7C	; 124
 2d8:	ff 4f       	sbci	r31, 0xFF	; 255
 2da:	12 82       	std	Z+2, r1	; 0x02
		strBtnInfo[enuBtnId].btn_state = BT_PRE_HOLD;
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	80 83       	st	Z, r24
	}
}
 2e0:	0f 90       	pop	r0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <vidPreHoldState>:


static void vidPreHoldState(Button_IdType enuBtnId)
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	1f 92       	push	r1
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 2fa:	08 2f       	mov	r16, r24
 2fc:	10 e0       	ldi	r17, 0x00	; 0
 2fe:	f8 01       	movw	r30, r16
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	e0 0f       	add	r30, r16
 306:	f1 1f       	adc	r31, r17
 308:	e0 58       	subi	r30, 0x80	; 128
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	be 01       	movw	r22, r28
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	80 81       	ld	r24, Z
 314:	0e 94 8b 00 	call	0x116	; 0x116 <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	61 f4       	brne	.+24     	; 0x336 <vidPreHoldState+0x4a>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 31e:	f8 01       	movw	r30, r16
 320:	ee 0f       	add	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	0e 0f       	add	r16, r30
 326:	1f 1f       	adc	r17, r31
 328:	f8 01       	movw	r30, r16
 32a:	ec 57       	subi	r30, 0x7C	; 124
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[enuBtnId].u8HoldThreshold    = BT_PRE_RELEASE;
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	82 83       	std	Z+2, r24	; 0x02
 334:	1b c0       	rjmp	.+54     	; 0x36c <vidPreHoldState+0x80>
	}
	else
	{
		strBtnInfo[enuBtnId].u8HoldThreshold++;
 336:	c8 01       	movw	r24, r16
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	80 0f       	add	r24, r16
 33e:	91 1f       	adc	r25, r17
 340:	fc 01       	movw	r30, r24
 342:	ec 57       	subi	r30, 0x7C	; 124
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	22 81       	ldd	r18, Z+2	; 0x02
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	22 83       	std	Z+2, r18	; 0x02
		if(strBtnInfo[enuBtnId].u8HoldThreshold >=
		Button_config[enuBtnId].u8HoldThreshold)
 34c:	fc 01       	movw	r30, r24
 34e:	e0 58       	subi	r30, 0x80	; 128
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	82 81       	ldd	r24, Z+2	; 0x02
		strBtnInfo[enuBtnId].u8HoldThreshold    = BT_PRE_RELEASE;
	}
	else
	{
		strBtnInfo[enuBtnId].u8HoldThreshold++;
		if(strBtnInfo[enuBtnId].u8HoldThreshold >=
 354:	28 17       	cp	r18, r24
 356:	50 f0       	brcs	.+20     	; 0x36c <vidPreHoldState+0x80>
		Button_config[enuBtnId].u8HoldThreshold)
		{
			strBtnInfo[enuBtnId].btn_state = BT_HOLD;
 358:	f8 01       	movw	r30, r16
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	0e 0f       	add	r16, r30
 360:	1f 1f       	adc	r17, r31
 362:	f8 01       	movw	r30, r16
 364:	ec 57       	subi	r30, 0x7C	; 124
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	80 83       	st	Z, r24
		else
		{
			/* Do Nothing */
		}
	}
}
 36c:	0f 90       	pop	r0
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <vidHoldState>:



static void vidHoldState(Button_IdType enuBtnId)
{
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	1f 92       	push	r1
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 386:	08 2f       	mov	r16, r24
 388:	10 e0       	ldi	r17, 0x00	; 0
 38a:	f8 01       	movw	r30, r16
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	e0 0f       	add	r30, r16
 392:	f1 1f       	adc	r31, r17
 394:	e0 58       	subi	r30, 0x80	; 128
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	be 01       	movw	r22, r28
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	80 81       	ld	r24, Z
 3a0:	0e 94 8b 00 	call	0x116	; 0x116 <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	59 f4       	brne	.+22     	; 0x3c0 <vidHoldState+0x48>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 3aa:	f8 01       	movw	r30, r16
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	0e 0f       	add	r16, r30
 3b2:	1f 1f       	adc	r17, r31
 3b4:	f8 01       	movw	r30, r16
 3b6:	ec 57       	subi	r30, 0x7C	; 124
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_RELEASE;
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	80 83       	st	Z, r24
	}
	else
	{
		/* Do Nothing */
	}
}
 3c0:	0f 90       	pop	r0
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret

000003cc <vidPreReleaseState>:



static void vidPreReleaseState(Button_IdType enuBtnId)
{
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	1f 92       	push	r1
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 3da:	08 2f       	mov	r16, r24
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	f8 01       	movw	r30, r16
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	e0 0f       	add	r30, r16
 3e6:	f1 1f       	adc	r31, r17
 3e8:	e0 58       	subi	r30, 0x80	; 128
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	be 01       	movw	r22, r28
 3ee:	6f 5f       	subi	r22, 0xFF	; 255
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	80 81       	ld	r24, Z
 3f4:	0e 94 8b 00 	call	0x116	; 0x116 <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	e1 f4       	brne	.+56     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
 3fe:	c8 01       	movw	r24, r16
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	80 0f       	add	r24, r16
 406:	91 1f       	adc	r25, r17
 408:	fc 01       	movw	r30, r24
 40a:	ec 57       	subi	r30, 0x7C	; 124
 40c:	ff 4f       	sbci	r31, 0xFF	; 255
 40e:	21 81       	ldd	r18, Z+1	; 0x01
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	21 83       	std	Z+1, r18	; 0x01
		
		if(strBtnInfo[enuBtnId].u8DebounceThreshold ==
		Button_config[enuBtnId].u8DebounceThreshold)
 414:	fc 01       	movw	r30, r24
 416:	e0 58       	subi	r30, 0x80	; 128
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	81 81       	ldd	r24, Z+1	; 0x01
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
		
		if(strBtnInfo[enuBtnId].u8DebounceThreshold ==
 41c:	28 13       	cpse	r18, r24
 41e:	15 c0       	rjmp	.+42     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		Button_config[enuBtnId].u8DebounceThreshold)
		{
			strBtnInfo[enuBtnId].btn_state = BT_RELEASED;
 420:	f8 01       	movw	r30, r16
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	0e 0f       	add	r16, r30
 428:	1f 1f       	adc	r17, r31
 42a:	f8 01       	movw	r30, r16
 42c:	ec 57       	subi	r30, 0x7C	; 124
 42e:	ff 4f       	sbci	r31, 0xFF	; 255
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	80 83       	st	Z, r24
 434:	0a c0       	rjmp	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			/* Do Nothing */
		}
	}
	else
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 436:	f8 01       	movw	r30, r16
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	0e 0f       	add	r16, r30
 43e:	1f 1f       	adc	r17, r31
 440:	f8 01       	movw	r30, r16
 442:	ec 57       	subi	r30, 0x7C	; 124
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 448:	10 82       	st	Z, r1
	}
}
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <vidReleaseState>:




static void vidReleaseState(Button_IdType enuBtnId)
{
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	1f 92       	push	r1
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 464:	08 2f       	mov	r16, r24
 466:	10 e0       	ldi	r17, 0x00	; 0
 468:	f8 01       	movw	r30, r16
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	e0 0f       	add	r30, r16
 470:	f1 1f       	adc	r31, r17
 472:	e0 58       	subi	r30, 0x80	; 128
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	be 01       	movw	r22, r28
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	80 81       	ld	r24, Z
 47e:	0e 94 8b 00 	call	0x116	; 0x116 <Dio_ReadChannel>
	
	if(u8BtnValue == BT_PUSH_LEVEL)
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	81 11       	cpse	r24, r1
 486:	0a c0       	rjmp	.+20     	; 0x49c <vidReleaseState+0x46>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 488:	f8 01       	movw	r30, r16
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	0e 0f       	add	r16, r30
 490:	1f 1f       	adc	r17, r31
 492:	f8 01       	movw	r30, r16
 494:	ec 57       	subi	r30, 0x7C	; 124
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 49a:	10 82       	st	Z, r1
	}
	else
	{
		/* Do nothing */
	}
 49c:	0f 90       	pop	r0
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret

000004a8 <vidUpdateBtnState>:



static void  vidUpdateBtnState(Button_IdType enuBtnId)
{
	switch(strBtnInfo[enuBtnId].btn_state)
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	2e 0f       	add	r18, r30
 4b4:	3f 1f       	adc	r19, r31
 4b6:	f9 01       	movw	r30, r18
 4b8:	ec 57       	subi	r30, 0x7C	; 124
 4ba:	ff 4f       	sbci	r31, 0xFF	; 255
 4bc:	90 81       	ld	r25, Z
 4be:	92 30       	cpi	r25, 0x02	; 2
 4c0:	91 f0       	breq	.+36     	; 0x4e6 <vidUpdateBtnState+0x3e>
 4c2:	28 f4       	brcc	.+10     	; 0x4ce <vidUpdateBtnState+0x26>
 4c4:	99 23       	and	r25, r25
 4c6:	49 f0       	breq	.+18     	; 0x4da <vidUpdateBtnState+0x32>
 4c8:	91 30       	cpi	r25, 0x01	; 1
 4ca:	51 f0       	breq	.+20     	; 0x4e0 <vidUpdateBtnState+0x38>
 4cc:	08 95       	ret
 4ce:	94 30       	cpi	r25, 0x04	; 4
 4d0:	81 f0       	breq	.+32     	; 0x4f2 <vidUpdateBtnState+0x4a>
 4d2:	60 f0       	brcs	.+24     	; 0x4ec <vidUpdateBtnState+0x44>
 4d4:	95 30       	cpi	r25, 0x05	; 5
 4d6:	81 f0       	breq	.+32     	; 0x4f8 <vidUpdateBtnState+0x50>
 4d8:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(enuBtnId);
 4da:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <vidPrePushState>
		break;
 4de:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(enuBtnId);
 4e0:	0e 94 40 01 	call	0x280	; 0x280 <vidPushState>
		break;
 4e4:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(enuBtnId);
 4e6:	0e 94 76 01 	call	0x2ec	; 0x2ec <vidPreHoldState>
		break;
 4ea:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(enuBtnId);
 4ec:	0e 94 bc 01 	call	0x378	; 0x378 <vidHoldState>
		break;
 4f0:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(enuBtnId);
 4f2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <vidPreReleaseState>
		break;
 4f6:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(enuBtnId);
 4f8:	0e 94 2b 02 	call	0x456	; 0x456 <vidReleaseState>
 4fc:	08 95       	ret

000004fe <button_Init>:

void button_Init(void)
{
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e c0       	rjmp	.+28     	; 0x51e <button_Init+0x20>
	{
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
 502:	e8 2f       	mov	r30, r24
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	9f 01       	movw	r18, r30
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	e2 0f       	add	r30, r18
 50e:	f3 1f       	adc	r31, r19
 510:	ec 57       	subi	r30, 0x7C	; 124
 512:	ff 4f       	sbci	r31, 0xFF	; 255
 514:	95 e0       	ldi	r25, 0x05	; 5
 516:	90 83       	st	Z, r25
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
 518:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
 51a:	12 82       	std	Z+2, r1	; 0x02

void button_Init(void)
{
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	88 23       	and	r24, r24
 520:	81 f3       	breq	.-32     	; 0x502 <button_Init+0x4>
	{
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
	}
}
 522:	08 95       	ret

00000524 <button_Main_Task>:



void button_Main_Task(void)
{
 524:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 526:	c0 e0       	ldi	r28, 0x00	; 0
 528:	04 c0       	rjmp	.+8      	; 0x532 <button_Main_Task+0xe>
	{
		vidUpdateBtnState((Button_IdType)u8Index);
 52a:	8c 2f       	mov	r24, r28
 52c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <vidUpdateBtnState>
void button_Main_Task(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 530:	cf 5f       	subi	r28, 0xFF	; 255
 532:	cc 23       	and	r28, r28
 534:	d1 f3       	breq	.-12     	; 0x52a <button_Main_Task+0x6>
	{
		vidUpdateBtnState((Button_IdType)u8Index);
	}
}
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <getButtonState>:

Button_StateType getButtonState(Button_IdType enmButtonId)
{
	Button_StateType enuReturn;
	
	if(enmButtonId < BUTTONS_NUM)
 53a:	81 11       	cpse	r24, r1
 53c:	0b c0       	rjmp	.+22     	; 0x554 <getButtonState+0x1a>
	{
		enuReturn = strBtnInfo[enmButtonId].btn_state ;
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	fc 01       	movw	r30, r24
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	8e 0f       	add	r24, r30
 548:	9f 1f       	adc	r25, r31
 54a:	fc 01       	movw	r30, r24
 54c:	ec 57       	subi	r30, 0x7C	; 124
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	80 81       	ld	r24, Z
 552:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
 554:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
