
LED_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000071e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000071e  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c1  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b6  00000000  00000000  00001a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b98  00000000  00000000  000023bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062f  00000000  00000000  0000317c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aed  00000000  00000000  000037ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8d 03 	jmp	0x71a	; 0x71a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
	//appStart();
	uint8_t data;
	 //Dio_Init();
	 button_Init();
  92:	0e 94 24 03 	call	0x648	; 0x648 <button_Init>
	 led_Init();
  96:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <led_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 ec       	ldi	r24, 0xC3	; 195
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x12>
  a4:	00 00       	nop
		//Dio_ReadChannel(DIO_PORTC_Channel2,&data);
		//Dio_WriteChannel(DIO_PORTB_Channel0 , data);
		//PORTB = ((PINC&(1U<<PINC2))>>PINC2);
		//data = 0;
		_delay_ms(10);
		button_Main_Task();
  a6:	0e 94 46 03 	call	0x68c	; 0x68c <button_Main_Task>
		data = getButtonState(0);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 51 03 	call	0x6a2	; 0x6a2 <getButtonState>
		//PORTB = data;
		
		if (data == BT_PRE_RELEASE)
  b0:	84 30       	cpi	r24, 0x04	; 4
  b2:	69 f4       	brne	.+26     	; 0xce <main+0x3c>
		{
			led_ON(1);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 81 03 	call	0x702	; 0x702 <led_ON>
			led_ON(2);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 81 03 	call	0x702	; 0x702 <led_ON>
			led_ON(3);
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 81 03 	call	0x702	; 0x702 <led_ON>
			led_ON(4);
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	0e 94 81 03 	call	0x702	; 0x702 <led_ON>
  cc:	e6 cf       	rjmp	.-52     	; 0x9a <main+0x8>
			//PORTB = 1<<1;
			//_delay_ms(1000);
		}
		else if (data == BT_PRE_PUSH)
  ce:	81 11       	cpse	r24, r1
  d0:	e4 cf       	rjmp	.-56     	; 0x9a <main+0x8>
		{
			led_OFF(1);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <led_OFF>
			led_OFF(2);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 60 03 	call	0x6c0	; 0x6c0 <led_OFF>
			led_OFF(3);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <led_OFF>
			led_OFF(4);
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <led_OFF>
  ea:	d7 cf       	rjmp	.-82     	; 0x9a <main+0x8>

000000ec <Dio_ChannelSetDIR>:
{
	uint8_t pinNumber ;
	
	
	
	if (ChannelId < DIO_MAX_PINS)
  ec:	80 32       	cpi	r24, 0x20	; 32
  ee:	a8 f5       	brcc	.+106    	; 0x15a <Dio_ChannelSetDIR+0x6e>
	{
		if (ChannelId < DIO_PORTB_Channel0)
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	58 f4       	brcc	.+22     	; 0x10a <Dio_ChannelSetDIR+0x1e>
		{
			pinNumber = ChannelId;
			DATA_DIRECTION_PORTA |= dir << pinNumber;
  f4:	9a b3       	in	r25, 0x1a	; 26
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Dio_ChannelSetDIR+0x12>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <Dio_ChannelSetDIR+0xe>
 102:	69 2b       	or	r22, r25
 104:	6a bb       	out	0x1a, r22	; 26
		else
		{
			pinNumber = ChannelId-24;
			DATA_DIRECTION_PORTD |= dir << pinNumber;
		}
		return DIO_E_OK;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
		if (ChannelId < DIO_PORTB_Channel0)
		{
			pinNumber = ChannelId;
			DATA_DIRECTION_PORTA |= dir << pinNumber;
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 10a:	80 31       	cpi	r24, 0x10	; 16
 10c:	60 f4       	brcc	.+24     	; 0x126 <Dio_ChannelSetDIR+0x3a>
		{
			pinNumber = ChannelId-8;
 10e:	88 50       	subi	r24, 0x08	; 8
			DATA_DIRECTION_PORTB |= dir << pinNumber;
 110:	97 b3       	in	r25, 0x17	; 23
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <Dio_ChannelSetDIR+0x2e>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	8a 95       	dec	r24
 11c:	e2 f7       	brpl	.-8      	; 0x116 <Dio_ChannelSetDIR+0x2a>
 11e:	69 2b       	or	r22, r25
 120:	67 bb       	out	0x17, r22	; 23
		else
		{
			pinNumber = ChannelId-24;
			DATA_DIRECTION_PORTD |= dir << pinNumber;
		}
		return DIO_E_OK;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
		else if (ChannelId < DIO_PORTC_Channel0)
		{
			pinNumber = ChannelId-8;
			DATA_DIRECTION_PORTB |= dir << pinNumber;
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 126:	88 31       	cpi	r24, 0x18	; 24
 128:	60 f4       	brcc	.+24     	; 0x142 <Dio_ChannelSetDIR+0x56>
		{
			pinNumber = ChannelId-16;
 12a:	80 51       	subi	r24, 0x10	; 16
			DATA_DIRECTION_PORTC |= dir << pinNumber;
 12c:	94 b3       	in	r25, 0x14	; 20
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_ChannelSetDIR+0x4a>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_ChannelSetDIR+0x46>
 13a:	69 2b       	or	r22, r25
 13c:	64 bb       	out	0x14, r22	; 20
		else
		{
			pinNumber = ChannelId-24;
			DATA_DIRECTION_PORTD |= dir << pinNumber;
		}
		return DIO_E_OK;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret
			pinNumber = ChannelId-16;
			DATA_DIRECTION_PORTC |= dir << pinNumber;
		}
		else
		{
			pinNumber = ChannelId-24;
 142:	88 51       	subi	r24, 0x18	; 24
			DATA_DIRECTION_PORTD |= dir << pinNumber;
 144:	91 b3       	in	r25, 0x11	; 17
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <Dio_ChannelSetDIR+0x62>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	8a 95       	dec	r24
 150:	e2 f7       	brpl	.-8      	; 0x14a <Dio_ChannelSetDIR+0x5e>
 152:	69 2b       	or	r22, r25
 154:	61 bb       	out	0x11, r22	; 17
		}
		return DIO_E_OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
	}
	else{
		return DIO_InvalidPin;
 15a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 15c:	08 95       	ret

0000015e <Dio_ReadChannel>:
DIO_Errors Dio_ReadChannel(Dio_ChannelType ChannelId ,Dio_LevelType* level)
{
	uint8_t pinNumber ;
	
	
	if (ChannelId < DIO_MAX_PINS )
 15e:	80 32       	cpi	r24, 0x20	; 32
 160:	08 f0       	brcs	.+2      	; 0x164 <Dio_ReadChannel+0x6>
 162:	6a c0       	rjmp	.+212    	; 0x238 <Dio_ReadChannel+0xda>
	{
		if (ChannelId < DIO_PORTB_Channel0)
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	b8 f4       	brcc	.+46     	; 0x196 <Dio_ReadChannel+0x38>
		{
			pinNumber = ChannelId;
			*level = ((RE_PORT_A & (1U<<pinNumber))>>pinNumber); 
 168:	99 b3       	in	r25, 0x19	; 25
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	a9 01       	movw	r20, r18
 170:	08 2e       	mov	r0, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <Dio_ReadChannel+0x1a>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <Dio_ReadChannel+0x16>
 17c:	29 2f       	mov	r18, r25
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	24 23       	and	r18, r20
 182:	35 23       	and	r19, r21
 184:	a9 01       	movw	r20, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <Dio_ReadChannel+0x2e>
 188:	56 95       	lsr	r21
 18a:	47 95       	ror	r20
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <Dio_ReadChannel+0x2a>
 190:	fb 01       	movw	r30, r22
 192:	40 83       	st	Z, r20
 194:	4b c0       	rjmp	.+150    	; 0x22c <Dio_ReadChannel+0xce>
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 196:	80 31       	cpi	r24, 0x10	; 16
 198:	c0 f4       	brcc	.+48     	; 0x1ca <Dio_ReadChannel+0x6c>
		{
			pinNumber = ChannelId-8;
 19a:	88 50       	subi	r24, 0x08	; 8
			*level = ((RE_PORT_B & (1U<<pinNumber))>>pinNumber);
 19c:	96 b3       	in	r25, 0x16	; 22
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	a9 01       	movw	r20, r18
 1a4:	08 2e       	mov	r0, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Dio_ReadChannel+0x4e>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <Dio_ReadChannel+0x4a>
 1b0:	29 2f       	mov	r18, r25
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	24 23       	and	r18, r20
 1b6:	35 23       	and	r19, r21
 1b8:	a9 01       	movw	r20, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <Dio_ReadChannel+0x62>
 1bc:	56 95       	lsr	r21
 1be:	47 95       	ror	r20
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <Dio_ReadChannel+0x5e>
 1c4:	fb 01       	movw	r30, r22
 1c6:	40 83       	st	Z, r20
 1c8:	31 c0       	rjmp	.+98     	; 0x22c <Dio_ReadChannel+0xce>
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 1ca:	88 31       	cpi	r24, 0x18	; 24
 1cc:	c0 f4       	brcc	.+48     	; 0x1fe <Dio_ReadChannel+0xa0>
		{
			pinNumber = ChannelId-16;
 1ce:	80 51       	subi	r24, 0x10	; 16
			*level = ((RE_PORT_C & (1U<<pinNumber))>>pinNumber);
 1d0:	93 b3       	in	r25, 0x13	; 19
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	a9 01       	movw	r20, r18
 1d8:	08 2e       	mov	r0, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Dio_ReadChannel+0x82>
 1dc:	44 0f       	add	r20, r20
 1de:	55 1f       	adc	r21, r21
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <Dio_ReadChannel+0x7e>
 1e4:	29 2f       	mov	r18, r25
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	24 23       	and	r18, r20
 1ea:	35 23       	and	r19, r21
 1ec:	a9 01       	movw	r20, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_ReadChannel+0x96>
 1f0:	56 95       	lsr	r21
 1f2:	47 95       	ror	r20
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_ReadChannel+0x92>
 1f8:	fb 01       	movw	r30, r22
 1fa:	40 83       	st	Z, r20
 1fc:	17 c0       	rjmp	.+46     	; 0x22c <Dio_ReadChannel+0xce>
		}
		else
		{
			pinNumber = ChannelId-24;
 1fe:	88 51       	subi	r24, 0x18	; 24
			*level = ((RE_PORT_D & (1U<<pinNumber))>>pinNumber);
 200:	90 b3       	in	r25, 0x10	; 16
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	a9 01       	movw	r20, r18
 208:	08 2e       	mov	r0, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <Dio_ReadChannel+0xb2>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <Dio_ReadChannel+0xae>
 214:	29 2f       	mov	r18, r25
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	24 23       	and	r18, r20
 21a:	35 23       	and	r19, r21
 21c:	a9 01       	movw	r20, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <Dio_ReadChannel+0xc6>
 220:	56 95       	lsr	r21
 222:	47 95       	ror	r20
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <Dio_ReadChannel+0xc2>
 228:	fb 01       	movw	r30, r22
 22a:	40 83       	st	Z, r20
		}
		*level &= 0x01; 
 22c:	fb 01       	movw	r30, r22
 22e:	80 81       	ld	r24, Z
 230:	81 70       	andi	r24, 0x01	; 1
 232:	80 83       	st	Z, r24
		return DIO_E_OK;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
	}
	else{
		return DIO_InvalidPin;
 238:	81 e0       	ldi	r24, 0x01	; 1
	}
		
}
 23a:	08 95       	ret

0000023c <Dio_WriteChannel>:
DIO_Errors Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType level)
{
	uint8_t pinNumber ;
	
	
	if (ChannelId < DIO_MAX_PINS )
 23c:	80 32       	cpi	r24, 0x20	; 32
 23e:	08 f0       	brcs	.+2      	; 0x242 <Dio_WriteChannel+0x6>
 240:	85 c0       	rjmp	.+266    	; 0x34c <Dio_WriteChannel+0x110>
	{
		if (ChannelId < DIO_PORTB_Channel0)
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	f8 f4       	brcc	.+62     	; 0x284 <Dio_WriteChannel+0x48>
		{
			pinNumber = ChannelId;
			if (level == STD_HIGH)
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	71 f4       	brne	.+28     	; 0x266 <Dio_WriteChannel+0x2a>
			{
				WR_PORT_A |= (1U << pinNumber);
 24a:	4b b3       	in	r20, 0x1b	; 27
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <Dio_WriteChannel+0x1c>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Dio_WriteChannel+0x18>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
			}
		}
		return DIO_E_OK;
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_A |= (1U << pinNumber);
			}
			else{
				WR_PORT_A &= ~(1U << pinNumber);
 266:	4b b3       	in	r20, 0x1b	; 27
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Dio_WriteChannel+0x38>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <Dio_WriteChannel+0x34>
 278:	cb 01       	movw	r24, r22
 27a:	80 95       	com	r24
 27c:	84 23       	and	r24, r20
 27e:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
			}
		}
		return DIO_E_OK;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
			}
			else{
				WR_PORT_A &= ~(1U << pinNumber);
			}
		}
		else if (ChannelId < DIO_PORTC_Channel0)
 284:	80 31       	cpi	r24, 0x10	; 16
 286:	00 f5       	brcc	.+64     	; 0x2c8 <Dio_WriteChannel+0x8c>
		{
			pinNumber = ChannelId-8;
 288:	88 50       	subi	r24, 0x08	; 8
			if (level == STD_HIGH)
 28a:	61 30       	cpi	r22, 0x01	; 1
 28c:	71 f4       	brne	.+28     	; 0x2aa <Dio_WriteChannel+0x6e>
			{
				WR_PORT_B |= (1U << pinNumber);
 28e:	48 b3       	in	r20, 0x18	; 24
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <Dio_WriteChannel+0x60>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <Dio_WriteChannel+0x5c>
 2a0:	cb 01       	movw	r24, r22
 2a2:	84 2b       	or	r24, r20
 2a4:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
			}
		}
		return DIO_E_OK;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_B |= (1U << pinNumber);
			}
			else{
				WR_PORT_B &= ~(1U << pinNumber);
 2aa:	48 b3       	in	r20, 0x18	; 24
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	b9 01       	movw	r22, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <Dio_WriteChannel+0x7c>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <Dio_WriteChannel+0x78>
 2bc:	cb 01       	movw	r24, r22
 2be:	80 95       	com	r24
 2c0:	84 23       	and	r24, r20
 2c2:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
			}
		}
		return DIO_E_OK;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
			}
			else{
				WR_PORT_B &= ~(1U << pinNumber);
			}
		}
		else if (ChannelId < DIO_PORTD_Channel0)
 2c8:	88 31       	cpi	r24, 0x18	; 24
 2ca:	00 f5       	brcc	.+64     	; 0x30c <Dio_WriteChannel+0xd0>
		{
			pinNumber = ChannelId-16;
 2cc:	80 51       	subi	r24, 0x10	; 16
			if (level == STD_HIGH)
 2ce:	61 30       	cpi	r22, 0x01	; 1
 2d0:	71 f4       	brne	.+28     	; 0x2ee <Dio_WriteChannel+0xb2>
			{
				WR_PORT_C |= (1U << pinNumber);
 2d2:	45 b3       	in	r20, 0x15	; 21
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <Dio_WriteChannel+0xa4>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	8a 95       	dec	r24
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <Dio_WriteChannel+0xa0>
 2e4:	cb 01       	movw	r24, r22
 2e6:	84 2b       	or	r24, r20
 2e8:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
			}
		}
		return DIO_E_OK;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_C |= (1U << pinNumber);
			}
			else{
				WR_PORT_C &= ~(1U << pinNumber);
 2ee:	45 b3       	in	r20, 0x15	; 21
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <Dio_WriteChannel+0xc0>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	8a 95       	dec	r24
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <Dio_WriteChannel+0xbc>
 300:	cb 01       	movw	r24, r22
 302:	80 95       	com	r24
 304:	84 23       	and	r24, r20
 306:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
			}
		}
		return DIO_E_OK;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
				WR_PORT_C &= ~(1U << pinNumber);
			}
		}
		else
		{
			pinNumber = ChannelId-24;
 30c:	88 51       	subi	r24, 0x18	; 24
			if (level == STD_HIGH)
 30e:	61 30       	cpi	r22, 0x01	; 1
 310:	71 f4       	brne	.+28     	; 0x32e <Dio_WriteChannel+0xf2>
			{
				WR_PORT_D |= (1U << pinNumber);
 312:	42 b3       	in	r20, 0x12	; 18
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	b9 01       	movw	r22, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <Dio_WriteChannel+0xe4>
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <Dio_WriteChannel+0xe0>
 324:	cb 01       	movw	r24, r22
 326:	84 2b       	or	r24, r20
 328:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
			}
		}
		return DIO_E_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
			if (level == STD_HIGH)
			{
				WR_PORT_D |= (1U << pinNumber);
			}
			else{
				WR_PORT_D &= ~(1U << pinNumber);
 32e:	42 b3       	in	r20, 0x12	; 18
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	b9 01       	movw	r22, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <Dio_WriteChannel+0x100>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	8a 95       	dec	r24
 33e:	e2 f7       	brpl	.-8      	; 0x338 <Dio_WriteChannel+0xfc>
 340:	cb 01       	movw	r24, r22
 342:	80 95       	com	r24
 344:	84 23       	and	r24, r20
 346:	82 bb       	out	0x12, r24	; 18
			}
		}
		return DIO_E_OK;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
	}
	else{
		return DIO_InvalidPin;
 34c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
 34e:	08 95       	ret

00000350 <vidPrePushState>:




static void vidPrePushState(Button_IdType enuBtnId)
{
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId,&u8BtnValue);
 35e:	08 2f       	mov	r16, r24
 360:	10 e0       	ldi	r17, 0x00	; 0
 362:	f8 01       	movw	r30, r16
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	e0 0f       	add	r30, r16
 36a:	f1 1f       	adc	r31, r17
 36c:	e0 5a       	subi	r30, 0xA0	; 160
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	80 81       	ld	r24, Z
 378:	0e 94 af 00 	call	0x15e	; 0x15e <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	51 f4       	brne	.+20     	; 0x396 <vidPrePushState+0x46>
	{
		strBtnInfo[enuBtnId].btn_state    = BT_PUSHED;
 382:	f8 01       	movw	r30, r16
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	0e 0f       	add	r16, r30
 38a:	1f 1f       	adc	r17, r31
 38c:	f8 01       	movw	r30, r16
 38e:	e4 59       	subi	r30, 0x94	; 148
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	80 83       	st	Z, r24
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <vidPrePushState+0x58>
	}
	else
	{
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 396:	f8 01       	movw	r30, r16
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	0e 0f       	add	r16, r30
 39e:	1f 1f       	adc	r17, r31
 3a0:	f8 01       	movw	r30, r16
 3a2:	e4 59       	subi	r30, 0x94	; 148
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
 3a6:	10 82       	st	Z, r1
	}
}
 3a8:	0f 90       	pop	r0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	08 95       	ret

000003b4 <vidPushState>:



static void vidPushState(Button_IdType enuBtnId)
{
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	1f 92       	push	r1
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 3c2:	08 2f       	mov	r16, r24
 3c4:	10 e0       	ldi	r17, 0x00	; 0
 3c6:	f8 01       	movw	r30, r16
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	e0 0f       	add	r30, r16
 3ce:	f1 1f       	adc	r31, r17
 3d0:	e0 5a       	subi	r30, 0xA0	; 160
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	be 01       	movw	r22, r28
 3d6:	6f 5f       	subi	r22, 0xFF	; 255
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	80 81       	ld	r24, Z
 3dc:	0e 94 af 00 	call	0x15e	; 0x15e <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	59 f4       	brne	.+22     	; 0x3fc <vidPushState+0x48>
	{
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_HOLD;
 3e6:	f8 01       	movw	r30, r16
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	0e 0f       	add	r16, r30
 3ee:	1f 1f       	adc	r17, r31
 3f0:	f8 01       	movw	r30, r16
 3f2:	e4 59       	subi	r30, 0x94	; 148
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	80 83       	st	Z, r24
 3fa:	09 c0       	rjmp	.+18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	}
	else
	{
		strBtnInfo[enuBtnId].btn_state = BT_PRE_PUSH;
 3fc:	f8 01       	movw	r30, r16
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	0e 0f       	add	r16, r30
 404:	1f 1f       	adc	r17, r31
 406:	f8 01       	movw	r30, r16
 408:	e4 59       	subi	r30, 0x94	; 148
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	10 82       	st	Z, r1
	}
}
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	08 95       	ret

0000041a <vidPreHoldState>:


static void vidPreHoldState(Button_IdType enuBtnId)
{
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	1f 92       	push	r1
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 428:	08 2f       	mov	r16, r24
 42a:	10 e0       	ldi	r17, 0x00	; 0
 42c:	f8 01       	movw	r30, r16
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	e0 0f       	add	r30, r16
 434:	f1 1f       	adc	r31, r17
 436:	e0 5a       	subi	r30, 0xA0	; 160
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	be 01       	movw	r22, r28
 43c:	6f 5f       	subi	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	80 81       	ld	r24, Z
 442:	0e 94 af 00 	call	0x15e	; 0x15e <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	59 f4       	brne	.+22     	; 0x462 <vidPreHoldState+0x48>
	{
		strBtnInfo[enuBtnId].btn_state   = BT_HOLD;
 44c:	f8 01       	movw	r30, r16
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	0e 0f       	add	r16, r30
 454:	1f 1f       	adc	r17, r31
 456:	f8 01       	movw	r30, r16
 458:	e4 59       	subi	r30, 0x94	; 148
 45a:	ff 4f       	sbci	r31, 0xFF	; 255
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	80 83       	st	Z, r24
 460:	09 c0       	rjmp	.+18     	; 0x474 <vidPreHoldState+0x5a>
	}
	else
	{
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 462:	f8 01       	movw	r30, r16
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	0e 0f       	add	r16, r30
 46a:	1f 1f       	adc	r17, r31
 46c:	f8 01       	movw	r30, r16
 46e:	e4 59       	subi	r30, 0x94	; 148
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	10 82       	st	Z, r1
	}
}
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	08 95       	ret

00000480 <vidHoldState>:



static void vidHoldState(Button_IdType enuBtnId)
{
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	1f 92       	push	r1
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 48e:	08 2f       	mov	r16, r24
 490:	10 e0       	ldi	r17, 0x00	; 0
 492:	f8 01       	movw	r30, r16
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	e0 0f       	add	r30, r16
 49a:	f1 1f       	adc	r31, r17
 49c:	e0 5a       	subi	r30, 0xA0	; 160
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	be 01       	movw	r22, r28
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	80 81       	ld	r24, Z
 4a8:	0e 94 af 00 	call	0x15e	; 0x15e <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	e1 f4       	brne	.+56     	; 0x4ea <vidHoldState+0x6a>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
 4b2:	c8 01       	movw	r24, r16
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	80 0f       	add	r24, r16
 4ba:	91 1f       	adc	r25, r17
 4bc:	fc 01       	movw	r30, r24
 4be:	e4 59       	subi	r30, 0x94	; 148
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	21 81       	ldd	r18, Z+1	; 0x01
 4c4:	2f 5f       	subi	r18, 0xFF	; 255
 4c6:	21 83       	std	Z+1, r18	; 0x01
		if(strBtnInfo[enuBtnId].u8DebounceThreshold == Button_config[enuBtnId].u8DebounceThreshold)
 4c8:	fc 01       	movw	r30, r24
 4ca:	e0 5a       	subi	r30, 0xA0	; 160
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	81 81       	ldd	r24, Z+1	; 0x01
 4d0:	28 13       	cpse	r18, r24
 4d2:	0b c0       	rjmp	.+22     	; 0x4ea <vidHoldState+0x6a>
		{
			strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 4d4:	f8 01       	movw	r30, r16
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	0e 0f       	add	r16, r30
 4dc:	1f 1f       	adc	r17, r31
 4de:	f8 01       	movw	r30, r16
 4e0:	e4 59       	subi	r30, 0x94	; 148
 4e2:	ff 4f       	sbci	r31, 0xFF	; 255
 4e4:	11 82       	std	Z+1, r1	; 0x01
			strBtnInfo[enuBtnId].btn_state    = BT_PRE_RELEASE;
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	80 83       	st	Z, r24
	}
	else
	{
		/* Do Nothing */
	}
}
 4ea:	0f 90       	pop	r0
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <vidPreReleaseState>:



static void vidPreReleaseState(Button_IdType enuBtnId)
{
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	1f 92       	push	r1
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 504:	08 2f       	mov	r16, r24
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	f8 01       	movw	r30, r16
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	e0 0f       	add	r30, r16
 510:	f1 1f       	adc	r31, r17
 512:	e0 5a       	subi	r30, 0xA0	; 160
 514:	ff 4f       	sbci	r31, 0xFF	; 255
 516:	be 01       	movw	r22, r28
 518:	6f 5f       	subi	r22, 0xFF	; 255
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	80 81       	ld	r24, Z
 51e:	0e 94 af 00 	call	0x15e	; 0x15e <Dio_ReadChannel>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	61 f4       	brne	.+24     	; 0x540 <vidPreReleaseState+0x4a>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold++;
 528:	f8 01       	movw	r30, r16
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	0e 0f       	add	r16, r30
 530:	1f 1f       	adc	r17, r31
 532:	f8 01       	movw	r30, r16
 534:	e4 59       	subi	r30, 0x94	; 148
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	81 81       	ldd	r24, Z+1	; 0x01
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	81 83       	std	Z+1, r24	; 0x01
 53e:	2a c0       	rjmp	.+84     	; 0x594 <vidPreReleaseState+0x9e>
	}
	else
	{
		if(strBtnInfo[enuBtnId].u8DebounceThreshold >= Button_config[enuBtnId].u8DebounceThreshold)
 540:	c8 01       	movw	r24, r16
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	80 0f       	add	r24, r16
 548:	91 1f       	adc	r25, r17
 54a:	fc 01       	movw	r30, r24
 54c:	e4 59       	subi	r30, 0x94	; 148
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	21 81       	ldd	r18, Z+1	; 0x01
 552:	fc 01       	movw	r30, r24
 554:	e0 5a       	subi	r30, 0xA0	; 160
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	81 81       	ldd	r24, Z+1	; 0x01
 55a:	28 17       	cp	r18, r24
 55c:	50 f0       	brcs	.+20     	; 0x572 <vidPreReleaseState+0x7c>
		{
			strBtnInfo[enuBtnId].btn_state = BT_RELEASED;
 55e:	f8 01       	movw	r30, r16
 560:	ee 0f       	add	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	e0 0f       	add	r30, r16
 566:	f1 1f       	adc	r31, r17
 568:	e4 59       	subi	r30, 0x94	; 148
 56a:	ff 4f       	sbci	r31, 0xFF	; 255
 56c:	85 e0       	ldi	r24, 0x05	; 5
 56e:	80 83       	st	Z, r24
 570:	08 c0       	rjmp	.+16     	; 0x582 <vidPreReleaseState+0x8c>
		}
		else
		{
			strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 572:	f8 01       	movw	r30, r16
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	e0 0f       	add	r30, r16
 57a:	f1 1f       	adc	r31, r17
 57c:	e4 59       	subi	r30, 0x94	; 148
 57e:	ff 4f       	sbci	r31, 0xFF	; 255
 580:	10 82       	st	Z, r1
		}
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 582:	f8 01       	movw	r30, r16
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	0e 0f       	add	r16, r30
 58a:	1f 1f       	adc	r17, r31
 58c:	f8 01       	movw	r30, r16
 58e:	e4 59       	subi	r30, 0x94	; 148
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	11 82       	std	Z+1, r1	; 0x01
		
	}
}
 594:	0f 90       	pop	r0
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <vidReleaseState>:




static void vidReleaseState(Button_IdType enuBtnId)
{
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	1f 92       	push	r1
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	Dio_ReadChannel(Button_config[enuBtnId].ChannelId, &u8BtnValue);
 5ae:	08 2f       	mov	r16, r24
 5b0:	10 e0       	ldi	r17, 0x00	; 0
 5b2:	f8 01       	movw	r30, r16
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	e0 0f       	add	r30, r16
 5ba:	f1 1f       	adc	r31, r17
 5bc:	e0 5a       	subi	r30, 0xA0	; 160
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	be 01       	movw	r22, r28
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	80 81       	ld	r24, Z
 5c8:	0e 94 af 00 	call	0x15e	; 0x15e <Dio_ReadChannel>
	
	if(u8BtnValue == BT_PUSH_LEVEL)
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	81 11       	cpse	r24, r1
 5d0:	0a c0       	rjmp	.+20     	; 0x5e6 <vidReleaseState+0x46>
	{
		strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
 5d2:	f8 01       	movw	r30, r16
 5d4:	ee 0f       	add	r30, r30
 5d6:	ff 1f       	adc	r31, r31
 5d8:	0e 0f       	add	r16, r30
 5da:	1f 1f       	adc	r17, r31
 5dc:	f8 01       	movw	r30, r16
 5de:	e4 59       	subi	r30, 0x94	; 148
 5e0:	ff 4f       	sbci	r31, 0xFF	; 255
 5e2:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[enuBtnId].btn_state    = BT_PRE_PUSH;
 5e4:	10 82       	st	Z, r1
	}
	else
	{
		/* Do nothing */
	}
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	08 95       	ret

000005f2 <vidUpdateBtnState>:



static void  vidUpdateBtnState(Button_IdType enuBtnId)
{
	switch(strBtnInfo[enuBtnId].btn_state)
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	f9 01       	movw	r30, r18
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	2e 0f       	add	r18, r30
 5fe:	3f 1f       	adc	r19, r31
 600:	f9 01       	movw	r30, r18
 602:	e4 59       	subi	r30, 0x94	; 148
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	90 81       	ld	r25, Z
 608:	92 30       	cpi	r25, 0x02	; 2
 60a:	91 f0       	breq	.+36     	; 0x630 <vidUpdateBtnState+0x3e>
 60c:	28 f4       	brcc	.+10     	; 0x618 <vidUpdateBtnState+0x26>
 60e:	99 23       	and	r25, r25
 610:	49 f0       	breq	.+18     	; 0x624 <vidUpdateBtnState+0x32>
 612:	91 30       	cpi	r25, 0x01	; 1
 614:	51 f0       	breq	.+20     	; 0x62a <vidUpdateBtnState+0x38>
 616:	08 95       	ret
 618:	94 30       	cpi	r25, 0x04	; 4
 61a:	81 f0       	breq	.+32     	; 0x63c <vidUpdateBtnState+0x4a>
 61c:	60 f0       	brcs	.+24     	; 0x636 <vidUpdateBtnState+0x44>
 61e:	95 30       	cpi	r25, 0x05	; 5
 620:	81 f0       	breq	.+32     	; 0x642 <vidUpdateBtnState+0x50>
 622:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(enuBtnId);
 624:	0e 94 a8 01 	call	0x350	; 0x350 <vidPrePushState>
		break;
 628:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(enuBtnId);
 62a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <vidPushState>
		break;
 62e:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(enuBtnId);
 630:	0e 94 0d 02 	call	0x41a	; 0x41a <vidPreHoldState>
		break;
 634:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(enuBtnId);
 636:	0e 94 40 02 	call	0x480	; 0x480 <vidHoldState>
		break;
 63a:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(enuBtnId);
 63c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <vidPreReleaseState>
		break;
 640:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(enuBtnId);
 642:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vidReleaseState>
 646:	08 95       	ret

00000648 <button_Init>:
/*********************** Public Functions Implementation **********************/
/******************************************************************************/


void button_Init(void)
{
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 64e:	10 e0       	ldi	r17, 0x00	; 0
 650:	17 c0       	rjmp	.+46     	; 0x680 <button_Init+0x38>
	{
		Dio_ChannelSetDIR((Button_config[u8Index].ChannelId) , STD_INPUT);
 652:	81 2f       	mov	r24, r17
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	fc 01       	movw	r30, r24
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	ef 01       	movw	r28, r30
 65e:	c8 0f       	add	r28, r24
 660:	d9 1f       	adc	r29, r25
 662:	fe 01       	movw	r30, r28
 664:	e0 5a       	subi	r30, 0xA0	; 160
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	0e 94 76 00 	call	0xec	; 0xec <Dio_ChannelSetDIR>
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
 670:	fe 01       	movw	r30, r28
 672:	e4 59       	subi	r30, 0x94	; 148
 674:	ff 4f       	sbci	r31, 0xFF	; 255
 676:	85 e0       	ldi	r24, 0x05	; 5
 678:	80 83       	st	Z, r24
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
 67a:	11 82       	std	Z+1, r1	; 0x01
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
 67c:	12 82       	std	Z+2, r1	; 0x02

void button_Init(void)
{
	uint8_t u8Index;
	
	for(u8Index=0;u8Index<BUTTONS_NUM;u8Index++)
 67e:	1f 5f       	subi	r17, 0xFF	; 255
 680:	11 23       	and	r17, r17
 682:	39 f3       	breq	.-50     	; 0x652 <button_Init+0xa>
		Dio_ChannelSetDIR((Button_config[u8Index].ChannelId) , STD_INPUT);
		strBtnInfo[u8Index].btn_state     = BT_RELEASED;
		strBtnInfo[u8Index].u8DebounceThreshold  = ((uint8_t)0U);
		strBtnInfo[u8Index].u8HoldThreshold      = ((uint8_t)0U);
	}
}
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	1f 91       	pop	r17
 68a:	08 95       	ret

0000068c <button_Main_Task>:



void button_Main_Task(void)
{
 68c:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 68e:	c0 e0       	ldi	r28, 0x00	; 0
 690:	04 c0       	rjmp	.+8      	; 0x69a <button_Main_Task+0xe>
	{
		vidUpdateBtnState((Button_IdType)u8Index);
 692:	8c 2f       	mov	r24, r28
 694:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vidUpdateBtnState>
void button_Main_Task(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 698:	cf 5f       	subi	r28, 0xFF	; 255
 69a:	cc 23       	and	r28, r28
 69c:	d1 f3       	breq	.-12     	; 0x692 <button_Main_Task+0x6>
	{
		vidUpdateBtnState((Button_IdType)u8Index);
	}
}
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <getButtonState>:

Button_StateType getButtonState(Button_IdType enmButtonId)
{
	Button_StateType enuReturn;
	
	if(enmButtonId < BUTTONS_NUM)
 6a2:	81 11       	cpse	r24, r1
 6a4:	0b c0       	rjmp	.+22     	; 0x6bc <getButtonState+0x1a>
	{
		enuReturn = strBtnInfo[enmButtonId].btn_state ;
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	fc 01       	movw	r30, r24
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	8e 0f       	add	r24, r30
 6b0:	9f 1f       	adc	r25, r31
 6b2:	fc 01       	movw	r30, r24
 6b4:	e4 59       	subi	r30, 0x94	; 148
 6b6:	ff 4f       	sbci	r31, 0xFF	; 255
 6b8:	80 81       	ld	r24, Z
 6ba:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
 6bc:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
 6be:	08 95       	ret

000006c0 <led_OFF>:
		led_OFF(u8_index);
	}
}
void led_OFF(LED_ID_type led)
{
	Dio_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_OFF);
 6c0:	e8 2f       	mov	r30, r24
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	31 97       	sbiw	r30, 0x01	; 1
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	ed 59       	subi	r30, 0x9D	; 157
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	0e 94 1e 01 	call	0x23c	; 0x23c <Dio_WriteChannel>
 6d6:	08 95       	ret

000006d8 <led_Init>:
#include "led_cfg.h"



void led_Init(void)
{
 6d8:	cf 93       	push	r28
	uint8_t u8_index;
	
	for (u8_index = 0 ; u8_index < LED_NUMs ; u8_index++)
 6da:	c0 e0       	ldi	r28, 0x00	; 0
 6dc:	0e c0       	rjmp	.+28     	; 0x6fa <led_Init+0x22>
	{
		Dio_ChannelSetDIR((LED_Config[u8_index].LED_CHANNEL_ID) , STD_OUTPUT);
 6de:	ec 2f       	mov	r30, r28
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	ed 59       	subi	r30, 0x9D	; 157
 6e8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ea:	61 e0       	ldi	r22, 0x01	; 1
 6ec:	80 81       	ld	r24, Z
 6ee:	0e 94 76 00 	call	0xec	; 0xec <Dio_ChannelSetDIR>
		led_OFF(u8_index);
 6f2:	8c 2f       	mov	r24, r28
 6f4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <led_OFF>

void led_Init(void)
{
	uint8_t u8_index;
	
	for (u8_index = 0 ; u8_index < LED_NUMs ; u8_index++)
 6f8:	cf 5f       	subi	r28, 0xFF	; 255
 6fa:	c4 30       	cpi	r28, 0x04	; 4
 6fc:	80 f3       	brcs	.-32     	; 0x6de <led_Init+0x6>
	{
		Dio_ChannelSetDIR((LED_Config[u8_index].LED_CHANNEL_ID) , STD_OUTPUT);
		led_OFF(u8_index);
	}
}
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <led_ON>:
{
	Dio_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_OFF);
}
void led_ON(LED_ID_type led)
{
	Dio_WriteChannel(LED_Config[led-1].LED_CHANNEL_ID,LED_ON);
 702:	e8 2f       	mov	r30, r24
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	31 97       	sbiw	r30, 0x01	; 1
 708:	ee 0f       	add	r30, r30
 70a:	ff 1f       	adc	r31, r31
 70c:	ed 59       	subi	r30, 0x9D	; 157
 70e:	ff 4f       	sbci	r31, 0xFF	; 255
 710:	61 e0       	ldi	r22, 0x01	; 1
 712:	80 81       	ld	r24, Z
 714:	0e 94 1e 01 	call	0x23c	; 0x23c <Dio_WriteChannel>
 718:	08 95       	ret

0000071a <_exit>:
 71a:	f8 94       	cli

0000071c <__stop_program>:
 71c:	ff cf       	rjmp	.-2      	; 0x71c <__stop_program>
